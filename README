ScrabbleCheat
=============

Revenge of the Verbally Challenged
----------------------------------

ScrabbleCheat is a tool I'm developing to finally beat my girlfriend in 
Scrabble.  Developing it in Erlang, mostly for fun.  Use it yourself, or explore
the code!

Originally development was considered in phases: generate words from your rack,
then place the words on the board.  This was using a DAWG algorithm most popular
in other Scrabble AIs such as Maven.  If you checkout the repo at tag 
WORDSEARCH, you will see this!  Run 'make run' from that commit and you get a 
simple trie-based search to generate words from your rack of tiles.

This was eschewed in favor of a GADDAG-based approach, such as the one used in
Quackle (http://people.csail.mit.edu/jasonkb/quackle/).  A GADDAG, for those who
don't know, is a perverted trie that is fat and fast, designed specifically for
Scrabble and games with similar rules (http://en.wikipedia.org/wiki/GADDAG).

##################
### Contents

ScrabbleCheat has the following contents:

* Makefile -> Builds the project, targets below.
* code/ -> Contains the project code.  This is for the server (the 'brains,' in
           Erlang) as well as the clients that communicate with it.
* lib/ -> Contains any extraneous support, such as testing macros, dictionary 
          files, Thrift libraries, and the like.
* TODO -> Small lists of tasks for the project.  This is my PM.

##################
### Requirements

ScrabbleCheat uses the following dependencies:

* ncurses-ruby -> This is only if you intend on using the Ruby terminal client.

* Thrift -> Apache Thrift is used to build language-agnostic web services 
  automatically, and it's how my AI communicates with any client or
  service who wants to use it to cheat.  See lib/ScrabbleCheat.thrift
  for the specification.  We build the files dynamically, so you'll 
  need Thrift installed to build the files that communicate with one another.

##################
### Milestones

Check out these git tags for particular milestones in the project.

* WORDSEARCH -> This is your basic anagram solver.  Plug in letters and it 
  returns a list of words you can generate with those letters.  Use '*' is 
  for a wildcard.

* GADDAG_WITH_CLIENT -> The first "real" "release," a simple ncurses UI
  is provided to communicate to the Erlang backend, which allows you to
  either add moves (such as your opponent's) or query the game for the
  4 highest scoring moves given a rack.  Requires ncurses-ruby 
  package to use the client. 

* WITH_THRIFT_V1 -> The GADDAG_WITH_CLIENT used a serialization scheme 
  that I made up, and was brittle/insecure as a server.  I moved the
  client/server to use Apache Thrift, which while stil a little buggy
  (the server won't start unless manually started from the Erlang 
  shell, -s and -run make it break) allows for better server behaviour,
  as well as a much more maintainable service that's easy to add clients
  for.

##################
### Branches

git checkout <branchname> for your favorite.  Note that for a while (until
Halloween 2010) virtually everything was done in master, like a n00b.

* master -> contains the most recent 'stable' code.  In master, 'make run'
  works, and the code doesn't have lame printlines or debugging
  stuff in it.

* develop -> Mostly for feature integration, here we have a fair bit of that
  debugging nonsense.  Where we merge to from feature branches.

* anything else -> Usually a feature branch for something I'm working on.



########################################################################
For now this is just loose code that will hopefully piece together into actual 
usable software; in the meantime, I'm putting it here as well as my local 
machine.  Enjoy, and email about any questions, concerns!

- Paul Meier
02/15/2011
pablo.a.meier@gmail.com  
www.morepaul.com
