ScrabbleCheat
=============

Revenge of the Verbally Challenged
----------------------------------

ScrabbleCheat is a tool I'm developing to finally beat my girlfriend in 
Scrabble.  Developing it in Erlang, mostly for fun.  Use it yourself, or explore
the code!

Originally development was considered in phases: generate words from your rack,
then place the words on the board.  This was using a DAWG algorithm most popular
in other Scrabble AIs such as Maven.  If you checkout the repo at tag 
WORDSEARCH, you will see this!  Run 'make run' from that commit and you get a 
simple trie-based search to generate words from your rack of tiles.

This was eschewed in favor of a GADDAG-based approach, such as the one used in
Quackle (http://people.csail.mit.edu/jasonkb/quackle/).  A GADDAG, for those who
don't know, is a perverted trie that is fat and fast, designed specifically for
Scrabble and games with similar rules (http://en.wikipedia.org/wiki/GADDAG).

##################
### Contents

ScrabbleCheat has the following contents:

* Makefile -> Builds the project, targets below.
* src/ -> Contains the .erl source files, as well as a hacktacular Ruby client
          I built for testing.  Use at your own risk.
* lib/ -> Contains any extraneous support, such as testing macros, dictionary 
          files, Thrift libraries, and the like.
* test/ -> Contains unit tests for each of the modules, some rigorous, most not.
* TODO -> Small lists of tasks for the project.  This is my PM, which I'm 
          hoping to integrate with the GitHub API (issues).

##################
### Makefile

The Makefile has the following targets:

* test -> 
        Compiles the project and runs the unit tests.
* shell -> 
        Compiles the project and loads the definitions into an Erlang shell.
* binary-gaddag -> 
        The wordsearch uses a GADDAG from a pretty huge dictionary file, and
        this creates a binary representation ahead of time that the program can
        use rather than dynamically generate. 
* clean -> 
        Removes all compilation bits.
* compile -> 
        Builds the project and stores the .beam files into build/
* compile-test -> 
        Builds the Unit tests.

##################
### Milestones

Check out these git tags for particular milestones in the project.

* WORDSEARCH -> This is your basic anagram solver.  Plug in letters and it 
  returns a list of words you can generate with those letters.  Use '*' is 
  for a wildcard.

* GADDAG_WITH_CLIENT -> The first "real" "release," a simple ncurses UI
  is provided to communicate to the Erlang backend, which allows you to
  either add moves (such as your opponent's) or query the game for the
  4 highest scoring moves given a rack.  Requires ncurses-ruby 
  package to use the client. 

##################
### Branches

git checkout <branchname> for your favorite.  Note that for a while (until
Halloween 2010) virtually everything was done in master, like a n00b.

* master -> contains the most recent 'stable' code.  In master, 'make run'
            works, and the code doesn't have lame printlines or debugging
            stuff in it.

* develop -> Mostly for feature integration, here we have a fair bit of that
             debugging nonsense.  Where we merge to from feature branches.

* anything else -> Usually a feature branch for something I'm working on.



########################################################################
For now this is just loose code that will hopefully piece together into actual 
usable software; in the meantime, I'm putting it here as well as my local 
machine.  Enjoy, and email about any questions, concerns!

- Paul Meier
02/15/2011
pablo.a.meier@gmail.com  
www.morepaul.com
