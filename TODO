------
SHORT-TERM:

    - OTP/Dialyzer/Rebar builds?
        - Long-pole: Clean up release builds. Includes lots of std library we don't need.
        - Long-pole: Testing of server not working with OTP stuff.  More hours into testing
                     harness and tests.

    - Flash/AIR client?
        - Mochiweb for erl HTTP thrift server, we hope?
        - Basic client for AS3 not working excellently...

    - Command line client:  Every app should have a CLI.  Also good for automation...

    - Deploy?  Snap site that talks to the Erlang via Thrift, Snap provides the web presence?

    - Wildcard optimization.
    - Paralelization.

    ****************************************************************************************
    *   Refactor the actual movesearch into a sub-application?  Let VM handle threading?   *
    ****************************************************************************************
    
    - Optional word verification as a gamestate bit, allowing a player to challenge?
    
    - Integrate the bug list/this file with the Github issue tracker, API?

SERVER
    - Better, more rigorous testing.  Mostly in movesearches, and the most recent features (wildcards, 
      dumping previous computation to disk).  Use abstractions!
    - Optimize, optimize, optimize.  Especially with wildcards.
        Immediate, obvious optimizations:
            -> Don't check candidate tiles on the right/bottom of an occupied tile
               unless there isn't another way of reaching it, i.e. from above or from the right.
            -> Remove duplicate candidates and duplicate moves with a sort-and-filter (nlog(n)),
               rather than the current one-sweep naive traversal (n^2-ish).
            -> Make better use of spawn(), especially on all the maps and foldls.  Paralellize 
               candidates, for example.
    - Types with Dialyzer.
    - Refactor/restructure the src/ directory for a clear separation of modules:  game (for things 
      like boards, tiles, etc), server (for things like serialization and/or database handling), 
      and ai (for movesearches, finding the best move, etc.).

    - I might be missing something. grep TODO and FIXME in the source to find something to do!


CURSES CLIENT
    - Rewrite in C?  Ruby-ncurses is crap, giving me memory corruption.
    - Undo/back.
    - Allow a turn to pass/skip.
    - Allow save/resume games.
    - Allow to check move validity on play_move.
    - Show history.

    - HOLY SHIT REFACTOR (if you want to preserve the client at all)
        - At the very least, generalize board printing code with some kind of board_window coordinates, 
          rather than duplicating  your hackey logic everywhere (most areas that print to the board).
