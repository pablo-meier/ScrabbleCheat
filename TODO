------
SHORT-TERM:

Features:
    - Allow for null moves/lost turns
    - Undo
    - Multiple clients no breakey.
    - BINGOS!  (+ 50)

    - Use Thrift, instead of your crappy-ass homebrew serialization/deserializtion scheme.
      It's a hack where you gave much more than it deserved.
        - Make the spec file. DONE
        - Generate the client/server code with calls to Thrift. DONE
        - Add the necessary binary files to lib/ DONE
        - Compile the newly-built Erlang files to .beam DONE
        - Add all compilation/building of new components to build system. DONE
        - Test cases?
        - Substitute your crappy server for a full thrift_socket_server
        - Substitute your crappy client for a full ScrabbleCheat::ScrabbleCheat::Client


    - Critical optimizations
    - Move selection (after generation, likely start out with naive high score).
    - UI. Curses/Nitrogen? CURSES.
       - FINNISH HYMN!
           -> Action choose!       
               - Input Move:
                   - Reject incorrect moves (server side)  TABLED
                - Get Moves:
                    - Get Rack. DONE
                    - Display menu with the moves sorted by score.
                    - Highlight the board with the currently selected move.
                    - Retrieve and play move from user's choice.
        - TEST TEST TEST.  Handle incorrect input/gamestates

	- Optimize Wildcards/Movesearch.
	    - PROFILE DAT
	    - nlogn duplication removal (currently n^2).
	    - Only check half as many candidates by looking for border cases.
    - Integrate the bug list with the Github issue tracker?

Code Quality:

SERVER
    - Better, more rigorous testing.  Mostly in movesearches, and the most recent features (wildcards, 
      serialization, dumping previous computation to disk).  Use abstractions!
    - Optimize, optimize, optimize.  Especially with wildcards.
        Immediate, obvious optimizations:
            -> Don't check candidate tiles on the right/bottom of an occupied tile
               unless there isn't another way of reaching it, i.e. from above or from the right.
            -> Remove duplicate candidates and duplicate moves with a sort-and-filter (nlog(n)),
               rather than the current one-sweep naive traversal (n^2-ish).
            -> Make better use of spawn(), especially on all the maps and foldls.  Paralellize 
               candidates, for example.
    - Types with Dialyzer.
    - Refactor/restructure the src/ directory for a clear separation of modules:  game (for things 
      like boards, tiles, etc), server (for things like serialization and/or database handling), 
      and ai (for movesearches, finding the best move, etc.).

   - Generalize the board and board parser to take different default
      configurations, such as a Lexulous board, Words With Friends, or a custom
      board.  The hard-coding is more a result of the fact that I'm in a place with
      no internet and can't consult the Regex library, and also because this is
      slightly easier.  This will mostly involve changing the new_board to parse the
      board in lib/, and changing the BOARD_HEIGHT and BOARD_LENGTH constants to
      read from that file as well. Ideally, one could start a game parametrized by
      game type (words_with_friends) and dictionary (twl, international) etc.

    - I might be missing something. grep TODO and FIXME in the source to find something to do!


CLIENT
    - Allow save games.
    - Allow to check move validity on play_move.
    - Show history.

    - HOLY SHIT REFACTOR
        - At the very least, generalize board printing code with some kind of board_window coordinates, 
          rather than duplicating  your hackey logic everywhere (most areas that print to the board).

GENERAL

    - Update/create this file dynamically with git issues API.
