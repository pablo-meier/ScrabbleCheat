// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ScrabbleCheat.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ScrabbleCheatHandler : virtual public ScrabbleCheatIf {
 public:
  ScrabbleCheatHandler() {
    // Your initialization goes here
  }

  void new_game(Gamestate& _return, const std::vector<std::string> & players, const GameName::type game_name, const Dictionary::type dict) {
    // Your implementation goes here
    printf("new_game\n");
  }

  void game_info(GameInfo& _return, const GameName::type game_name) {
    // Your implementation goes here
    printf("game_info\n");
  }

  void play_move(Gamestate& _return, const std::vector<Tile> & tiles, const Gamestate& gamestate) {
    // Your implementation goes here
    printf("play_move\n");
  }

  void pass_turn(Gamestate& _return, const Gamestate& gamestate) {
    // Your implementation goes here
    printf("pass_turn\n");
  }

  void get_scrabblecheat_suggestions(std::vector<Move> & _return, const std::string& rack, const Board& board, const GameName::type game_name, const Dictionary::type dict) {
    // Your implementation goes here
    printf("get_scrabblecheat_suggestions\n");
  }

  void quit() {
    // Your implementation goes here
    printf("quit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ScrabbleCheatHandler> handler(new ScrabbleCheatHandler());
  shared_ptr<TProcessor> processor(new ScrabbleCheatProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

