%%
%% Autogenerated by Thrift Compiler (0.9.3)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(scrabbleCheat_thrift).
-behaviour(thrift_service).


-include("scrabbleCheat_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% new_game(This, Players, Game_name, Dict)
function_info('new_game', params_type) ->
  {struct, [{1, {list, string}},
          {2, i32},
          {3, i32}]}
;
function_info('new_game', reply_type) ->
  {struct, {'scrabbleCheat_types', 'gamestate'}};
function_info('new_game', exceptions) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'badArgsException'}}}]}
;
% game_info(This, Game_name)
function_info('game_info', params_type) ->
  {struct, [{1, i32}]}
;
function_info('game_info', reply_type) ->
  {struct, {'scrabbleCheat_types', 'gameInfo'}};
function_info('game_info', exceptions) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'badArgsException'}}}]}
;
% play_move(This, Tiles, Gamestate)
function_info('play_move', params_type) ->
  {struct, [{1, {list, {struct, {'scrabbleCheat_types', 'tile'}}}},
          {2, {struct, {'scrabbleCheat_types', 'gamestate'}}}]}
;
function_info('play_move', reply_type) ->
  {struct, {'scrabbleCheat_types', 'gamestate'}};
function_info('play_move', exceptions) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'badArgsException'}}}]}
;
% pass_turn(This, Gamestate)
function_info('pass_turn', params_type) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'gamestate'}}}]}
;
function_info('pass_turn', reply_type) ->
  {struct, {'scrabbleCheat_types', 'gamestate'}};
function_info('pass_turn', exceptions) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'badArgsException'}}}]}
;
% get_scrabblecheat_suggestions(This, Rack, Board, Game_name, Dict)
function_info('get_scrabblecheat_suggestions', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'scrabbleCheat_types', 'tile'}}}},
          {3, i32},
          {4, i32}]}
;
function_info('get_scrabblecheat_suggestions', reply_type) ->
  {list, {struct, {'scrabbleCheat_types', 'move'}}};
function_info('get_scrabblecheat_suggestions', exceptions) ->
  {struct, [{1, {struct, {'scrabbleCheat_types', 'badArgsException'}}}]}
;
% quit(This)
function_info('quit', params_type) ->
  {struct, []}
;
function_info('quit', reply_type) ->
  oneway_void;
function_info('quit', exceptions) ->
  {struct, []}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

