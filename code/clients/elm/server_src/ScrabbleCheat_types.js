//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.LetterType = {
  'CHARACTER' : 0,
  'WILDCARD' : 1,
  'EMPTY' : 2
};
ttypes.Bonus = {
  'TRIPLE_WORD_SCORE' : 0,
  'DOUBLE_WORD_SCORE' : 1,
  'TRIPLE_LETTER_SCORE' : 2,
  'DOUBLE_LETTER_SCORE' : 3,
  'NONE' : 4
};
ttypes.GameName = {
  'SCRABBLE' : 0,
  'WORDS_WITH_FRIENDS' : 1,
  'LEXULOUS' : 2
};
ttypes.Dictionary = {
  'TWL06' : 0,
  'SOWPODS' : 1,
  'ZYNGA' : 2
};
Tile = module.exports.Tile = function(args) {
  this.row = null;
  this.col = null;
  this.type = null;
  this.letter = null;
  this.bonus = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.letter !== undefined && args.letter !== null) {
      this.letter = args.letter;
    }
    if (args.bonus !== undefined && args.bonus !== null) {
      this.bonus = args.bonus;
    }
  }
};
Tile.prototype = {};
Tile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.row = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.col = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.letter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bonus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tile.prototype.write = function(output) {
  output.writeStructBegin('Tile');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.BYTE, 1);
    output.writeByte(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.BYTE, 2);
    output.writeByte(this.col);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.letter !== null && this.letter !== undefined) {
    output.writeFieldBegin('letter', Thrift.Type.STRING, 4);
    output.writeString(this.letter);
    output.writeFieldEnd();
  }
  if (this.bonus !== null && this.bonus !== undefined) {
    output.writeFieldBegin('bonus', Thrift.Type.I32, 5);
    output.writeI32(this.bonus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Move = module.exports.Move = function(args) {
  this.move = null;
  this.score = null;
  if (args) {
    if (args.move !== undefined && args.move !== null) {
      this.move = Thrift.copyList(args.move, [ttypes.Tile]);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
  }
};
Move.prototype = {};
Move.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.move = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Tile();
          elem6.read(input);
          this.move.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.score = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Move.prototype.write = function(output) {
  output.writeStructBegin('Move');
  if (this.move !== null && this.move !== undefined) {
    output.writeFieldBegin('move', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.move.length);
    for (var iter7 in this.move)
    {
      if (this.move.hasOwnProperty(iter7))
      {
        iter7 = this.move[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I16, 2);
    output.writeI16(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Turn = module.exports.Turn = function(args) {
  this.move = null;
  this.player = null;
  if (args) {
    if (args.move !== undefined && args.move !== null) {
      this.move = new ttypes.Move(args.move);
    }
    if (args.player !== undefined && args.player !== null) {
      this.player = args.player;
    }
  }
};
Turn.prototype = {};
Turn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.move = new ttypes.Move();
        this.move.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.player = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Turn.prototype.write = function(output) {
  output.writeStructBegin('Turn');
  if (this.move !== null && this.move !== undefined) {
    output.writeFieldBegin('move', Thrift.Type.STRUCT, 1);
    this.move.write(output);
    output.writeFieldEnd();
  }
  if (this.player !== null && this.player !== undefined) {
    output.writeFieldBegin('player', Thrift.Type.STRING, 2);
    output.writeString(this.player);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameInfo = module.exports.GameInfo = function(args) {
  this.name = null;
  this.rack_size = null;
  this.bingo_bonus = null;
  this.letter_distribution = null;
  this.score_distribution = null;
  this.allowed_dictionaries = null;
  this.board_template = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.rack_size !== undefined && args.rack_size !== null) {
      this.rack_size = args.rack_size;
    }
    if (args.bingo_bonus !== undefined && args.bingo_bonus !== null) {
      this.bingo_bonus = Thrift.copyMap(args.bingo_bonus, [null]);
    }
    if (args.letter_distribution !== undefined && args.letter_distribution !== null) {
      this.letter_distribution = Thrift.copyMap(args.letter_distribution, [null]);
    }
    if (args.score_distribution !== undefined && args.score_distribution !== null) {
      this.score_distribution = Thrift.copyMap(args.score_distribution, [null]);
    }
    if (args.allowed_dictionaries !== undefined && args.allowed_dictionaries !== null) {
      this.allowed_dictionaries = Thrift.copyList(args.allowed_dictionaries, [null]);
    }
    if (args.board_template !== undefined && args.board_template !== null) {
      this.board_template = Thrift.copyList(args.board_template, [ttypes.Tile]);
    }
  }
};
GameInfo.prototype = {};
GameInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.rack_size = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.bingo_bonus = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readByte();
          val15 = input.readI32();
          this.bingo_bonus[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.letter_distribution = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readString();
          val23 = input.readByte();
          this.letter_distribution[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.score_distribution = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          val31 = input.readByte();
          this.score_distribution[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.allowed_dictionaries = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32();
          this.allowed_dictionaries.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.board_template = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.Tile();
          elem45.read(input);
          this.board_template.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameInfo.prototype.write = function(output) {
  output.writeStructBegin('GameInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.I32, 1);
    output.writeI32(this.name);
    output.writeFieldEnd();
  }
  if (this.rack_size !== null && this.rack_size !== undefined) {
    output.writeFieldBegin('rack_size', Thrift.Type.BYTE, 2);
    output.writeByte(this.rack_size);
    output.writeFieldEnd();
  }
  if (this.bingo_bonus !== null && this.bingo_bonus !== undefined) {
    output.writeFieldBegin('bingo_bonus', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.BYTE, Thrift.Type.I32, Thrift.objectLength(this.bingo_bonus));
    for (var kiter46 in this.bingo_bonus)
    {
      if (this.bingo_bonus.hasOwnProperty(kiter46))
      {
        var viter47 = this.bingo_bonus[kiter46];
        output.writeByte(kiter46);
        output.writeI32(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.letter_distribution !== null && this.letter_distribution !== undefined) {
    output.writeFieldBegin('letter_distribution', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BYTE, Thrift.objectLength(this.letter_distribution));
    for (var kiter48 in this.letter_distribution)
    {
      if (this.letter_distribution.hasOwnProperty(kiter48))
      {
        var viter49 = this.letter_distribution[kiter48];
        output.writeString(kiter48);
        output.writeByte(viter49);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.score_distribution !== null && this.score_distribution !== undefined) {
    output.writeFieldBegin('score_distribution', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BYTE, Thrift.objectLength(this.score_distribution));
    for (var kiter50 in this.score_distribution)
    {
      if (this.score_distribution.hasOwnProperty(kiter50))
      {
        var viter51 = this.score_distribution[kiter50];
        output.writeString(kiter50);
        output.writeByte(viter51);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.allowed_dictionaries !== null && this.allowed_dictionaries !== undefined) {
    output.writeFieldBegin('allowed_dictionaries', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.allowed_dictionaries.length);
    for (var iter52 in this.allowed_dictionaries)
    {
      if (this.allowed_dictionaries.hasOwnProperty(iter52))
      {
        iter52 = this.allowed_dictionaries[iter52];
        output.writeI32(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.board_template !== null && this.board_template !== undefined) {
    output.writeFieldBegin('board_template', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.board_template.length);
    for (var iter53 in this.board_template)
    {
      if (this.board_template.hasOwnProperty(iter53))
      {
        iter53 = this.board_template[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Gamestate = module.exports.Gamestate = function(args) {
  this.board = null;
  this.scores = null;
  this.player_turn = null;
  this.turn_order = null;
  this.history = null;
  this.game_name = null;
  this.dict = null;
  if (args) {
    if (args.board !== undefined && args.board !== null) {
      this.board = Thrift.copyList(args.board, [ttypes.Tile]);
    }
    if (args.scores !== undefined && args.scores !== null) {
      this.scores = Thrift.copyMap(args.scores, [null]);
    }
    if (args.player_turn !== undefined && args.player_turn !== null) {
      this.player_turn = args.player_turn;
    }
    if (args.turn_order !== undefined && args.turn_order !== null) {
      this.turn_order = Thrift.copyList(args.turn_order, [null]);
    }
    if (args.history !== undefined && args.history !== null) {
      this.history = Thrift.copyList(args.history, [ttypes.Turn]);
    }
    if (args.game_name !== undefined && args.game_name !== null) {
      this.game_name = args.game_name;
    }
    if (args.dict !== undefined && args.dict !== null) {
      this.dict = args.dict;
    }
  }
};
Gamestate.prototype = {};
Gamestate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.board = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = new ttypes.Tile();
          elem60.read(input);
          this.board.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size61 = 0;
        var _rtmp365;
        this.scores = {};
        var _ktype62 = 0;
        var _vtype63 = 0;
        _rtmp365 = input.readMapBegin();
        _ktype62 = _rtmp365.ktype;
        _vtype63 = _rtmp365.vtype;
        _size61 = _rtmp365.size;
        for (var _i66 = 0; _i66 < _size61; ++_i66)
        {
          var key67 = null;
          var val68 = null;
          key67 = input.readString();
          val68 = input.readI16();
          this.scores[key67] = val68;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.player_turn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size69 = 0;
        var _rtmp373;
        this.turn_order = [];
        var _etype72 = 0;
        _rtmp373 = input.readListBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = input.readString();
          this.turn_order.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.history = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.Turn();
          elem82.read(input);
          this.history.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.game_name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.dict = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gamestate.prototype.write = function(output) {
  output.writeStructBegin('Gamestate');
  if (this.board !== null && this.board !== undefined) {
    output.writeFieldBegin('board', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.board.length);
    for (var iter83 in this.board)
    {
      if (this.board.hasOwnProperty(iter83))
      {
        iter83 = this.board[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scores !== null && this.scores !== undefined) {
    output.writeFieldBegin('scores', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I16, Thrift.objectLength(this.scores));
    for (var kiter84 in this.scores)
    {
      if (this.scores.hasOwnProperty(kiter84))
      {
        var viter85 = this.scores[kiter84];
        output.writeString(kiter84);
        output.writeI16(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.player_turn !== null && this.player_turn !== undefined) {
    output.writeFieldBegin('player_turn', Thrift.Type.STRING, 3);
    output.writeString(this.player_turn);
    output.writeFieldEnd();
  }
  if (this.turn_order !== null && this.turn_order !== undefined) {
    output.writeFieldBegin('turn_order', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.turn_order.length);
    for (var iter86 in this.turn_order)
    {
      if (this.turn_order.hasOwnProperty(iter86))
      {
        iter86 = this.turn_order[iter86];
        output.writeString(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.history !== null && this.history !== undefined) {
    output.writeFieldBegin('history', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.history.length);
    for (var iter87 in this.history)
    {
      if (this.history.hasOwnProperty(iter87))
      {
        iter87 = this.history[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.game_name !== null && this.game_name !== undefined) {
    output.writeFieldBegin('game_name', Thrift.Type.I32, 6);
    output.writeI32(this.game_name);
    output.writeFieldEnd();
  }
  if (this.dict !== null && this.dict !== undefined) {
    output.writeFieldBegin('dict', Thrift.Type.I32, 7);
    output.writeI32(this.dict);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BadArgsException = module.exports.BadArgsException = function(args) {
  Thrift.TException.call(this, "BadArgsException")
  this.name = "BadArgsException"
  this.reprimand = null;
  if (args) {
    if (args.reprimand !== undefined && args.reprimand !== null) {
      this.reprimand = args.reprimand;
    }
  }
};
Thrift.inherits(BadArgsException, Thrift.TException);
BadArgsException.prototype.name = 'BadArgsException';
BadArgsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reprimand = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BadArgsException.prototype.write = function(output) {
  output.writeStructBegin('BadArgsException');
  if (this.reprimand !== null && this.reprimand !== undefined) {
    output.writeFieldBegin('reprimand', Thrift.Type.STRING, 1);
    output.writeString(this.reprimand);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

