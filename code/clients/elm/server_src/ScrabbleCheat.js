//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ScrabbleCheat_types');
//HELPER FUNCTIONS AND STRUCTURES

ScrabbleCheat_new_game_args = function(args) {
  this.players = null;
  this.game_name = null;
  this.dict = null;
  if (args) {
    if (args.players !== undefined && args.players !== null) {
      this.players = Thrift.copyList(args.players, [null]);
    }
    if (args.game_name !== undefined && args.game_name !== null) {
      this.game_name = args.game_name;
    }
    if (args.dict !== undefined && args.dict !== null) {
      this.dict = args.dict;
    }
  }
};
ScrabbleCheat_new_game_args.prototype = {};
ScrabbleCheat_new_game_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.players = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.players.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.game_name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dict = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_new_game_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_new_game_args');
  if (this.players !== null && this.players !== undefined) {
    output.writeFieldBegin('players', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.players.length);
    for (var iter95 in this.players)
    {
      if (this.players.hasOwnProperty(iter95))
      {
        iter95 = this.players[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.game_name !== null && this.game_name !== undefined) {
    output.writeFieldBegin('game_name', Thrift.Type.I32, 2);
    output.writeI32(this.game_name);
    output.writeFieldEnd();
  }
  if (this.dict !== null && this.dict !== undefined) {
    output.writeFieldBegin('dict', Thrift.Type.I32, 3);
    output.writeI32(this.dict);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_new_game_result = function(args) {
  this.success = null;
  this.what = null;
  if (args instanceof ttypes.BadArgsException) {
    this.what = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Gamestate(args.success);
    }
    if (args.what !== undefined && args.what !== null) {
      this.what = args.what;
    }
  }
};
ScrabbleCheat_new_game_result.prototype = {};
ScrabbleCheat_new_game_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Gamestate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.what = new ttypes.BadArgsException();
        this.what.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_new_game_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_new_game_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.STRUCT, 1);
    this.what.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_game_info_args = function(args) {
  this.game_name = null;
  if (args) {
    if (args.game_name !== undefined && args.game_name !== null) {
      this.game_name = args.game_name;
    }
  }
};
ScrabbleCheat_game_info_args.prototype = {};
ScrabbleCheat_game_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.game_name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_game_info_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_game_info_args');
  if (this.game_name !== null && this.game_name !== undefined) {
    output.writeFieldBegin('game_name', Thrift.Type.I32, 1);
    output.writeI32(this.game_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_game_info_result = function(args) {
  this.success = null;
  this.msg = null;
  if (args instanceof ttypes.BadArgsException) {
    this.msg = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GameInfo(args.success);
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
ScrabbleCheat_game_info_result.prototype = {};
ScrabbleCheat_game_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GameInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.BadArgsException();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_game_info_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_game_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 1);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_play_move_args = function(args) {
  this.tiles = null;
  this.gamestate = null;
  if (args) {
    if (args.tiles !== undefined && args.tiles !== null) {
      this.tiles = Thrift.copyList(args.tiles, [ttypes.Tile]);
    }
    if (args.gamestate !== undefined && args.gamestate !== null) {
      this.gamestate = new ttypes.Gamestate(args.gamestate);
    }
  }
};
ScrabbleCheat_play_move_args.prototype = {};
ScrabbleCheat_play_move_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.tiles = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.Tile();
          elem102.read(input);
          this.tiles.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gamestate = new ttypes.Gamestate();
        this.gamestate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_play_move_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_play_move_args');
  if (this.tiles !== null && this.tiles !== undefined) {
    output.writeFieldBegin('tiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tiles.length);
    for (var iter103 in this.tiles)
    {
      if (this.tiles.hasOwnProperty(iter103))
      {
        iter103 = this.tiles[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.gamestate !== null && this.gamestate !== undefined) {
    output.writeFieldBegin('gamestate', Thrift.Type.STRUCT, 2);
    this.gamestate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_play_move_result = function(args) {
  this.success = null;
  this.msg = null;
  if (args instanceof ttypes.BadArgsException) {
    this.msg = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Gamestate(args.success);
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
ScrabbleCheat_play_move_result.prototype = {};
ScrabbleCheat_play_move_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Gamestate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.BadArgsException();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_play_move_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_play_move_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 1);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_pass_turn_args = function(args) {
  this.gamestate = null;
  if (args) {
    if (args.gamestate !== undefined && args.gamestate !== null) {
      this.gamestate = new ttypes.Gamestate(args.gamestate);
    }
  }
};
ScrabbleCheat_pass_turn_args.prototype = {};
ScrabbleCheat_pass_turn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.gamestate = new ttypes.Gamestate();
        this.gamestate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_pass_turn_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_pass_turn_args');
  if (this.gamestate !== null && this.gamestate !== undefined) {
    output.writeFieldBegin('gamestate', Thrift.Type.STRUCT, 1);
    this.gamestate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_pass_turn_result = function(args) {
  this.success = null;
  this.msg = null;
  if (args instanceof ttypes.BadArgsException) {
    this.msg = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Gamestate(args.success);
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
ScrabbleCheat_pass_turn_result.prototype = {};
ScrabbleCheat_pass_turn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Gamestate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.BadArgsException();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_pass_turn_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_pass_turn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 1);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_get_scrabblecheat_suggestions_args = function(args) {
  this.rack = null;
  this.board = null;
  this.game_name = null;
  this.dict = null;
  if (args) {
    if (args.rack !== undefined && args.rack !== null) {
      this.rack = args.rack;
    }
    if (args.board !== undefined && args.board !== null) {
      this.board = Thrift.copyList(args.board, [ttypes.Tile]);
    }
    if (args.game_name !== undefined && args.game_name !== null) {
      this.game_name = args.game_name;
    }
    if (args.dict !== undefined && args.dict !== null) {
      this.dict = args.dict;
    }
  }
};
ScrabbleCheat_get_scrabblecheat_suggestions_args.prototype = {};
ScrabbleCheat_get_scrabblecheat_suggestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.board = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.Tile();
          elem110.read(input);
          this.board.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.game_name = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.dict = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_get_scrabblecheat_suggestions_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_get_scrabblecheat_suggestions_args');
  if (this.rack !== null && this.rack !== undefined) {
    output.writeFieldBegin('rack', Thrift.Type.STRING, 1);
    output.writeString(this.rack);
    output.writeFieldEnd();
  }
  if (this.board !== null && this.board !== undefined) {
    output.writeFieldBegin('board', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.board.length);
    for (var iter111 in this.board)
    {
      if (this.board.hasOwnProperty(iter111))
      {
        iter111 = this.board[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.game_name !== null && this.game_name !== undefined) {
    output.writeFieldBegin('game_name', Thrift.Type.I32, 3);
    output.writeI32(this.game_name);
    output.writeFieldEnd();
  }
  if (this.dict !== null && this.dict !== undefined) {
    output.writeFieldBegin('dict', Thrift.Type.I32, 4);
    output.writeI32(this.dict);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_get_scrabblecheat_suggestions_result = function(args) {
  this.success = null;
  this.msg = null;
  if (args instanceof ttypes.BadArgsException) {
    this.msg = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Move]);
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
ScrabbleCheat_get_scrabblecheat_suggestions_result.prototype = {};
ScrabbleCheat_get_scrabblecheat_suggestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Move();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.BadArgsException();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_get_scrabblecheat_suggestions_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_get_scrabblecheat_suggestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 1);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_quit_args = function(args) {
};
ScrabbleCheat_quit_args.prototype = {};
ScrabbleCheat_quit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_quit_args.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_quit_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheat_quit_result = function(args) {
};
ScrabbleCheat_quit_result.prototype = {};
ScrabbleCheat_quit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScrabbleCheat_quit_result.prototype.write = function(output) {
  output.writeStructBegin('ScrabbleCheat_quit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScrabbleCheatClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ScrabbleCheatClient.prototype = {};
ScrabbleCheatClient.prototype.seqid = function() { return this._seqid; }
ScrabbleCheatClient.prototype.new_seqid = function() { return this._seqid += 1; }
ScrabbleCheatClient.prototype.new_game = function(players, game_name, dict, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_new_game(players, game_name, dict);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_new_game(players, game_name, dict);
  }
};

ScrabbleCheatClient.prototype.send_new_game = function(players, game_name, dict) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('new_game', Thrift.MessageType.CALL, this.seqid());
  var args = new ScrabbleCheat_new_game_args();
  args.players = players;
  args.game_name = game_name;
  args.dict = dict;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScrabbleCheatClient.prototype.recv_new_game = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScrabbleCheat_new_game_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.what) {
    return callback(result.what);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('new_game failed: unknown result');
};
ScrabbleCheatClient.prototype.game_info = function(game_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_game_info(game_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_game_info(game_name);
  }
};

ScrabbleCheatClient.prototype.send_game_info = function(game_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('game_info', Thrift.MessageType.CALL, this.seqid());
  var args = new ScrabbleCheat_game_info_args();
  args.game_name = game_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScrabbleCheatClient.prototype.recv_game_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScrabbleCheat_game_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.msg) {
    return callback(result.msg);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('game_info failed: unknown result');
};
ScrabbleCheatClient.prototype.play_move = function(tiles, gamestate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_play_move(tiles, gamestate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_play_move(tiles, gamestate);
  }
};

ScrabbleCheatClient.prototype.send_play_move = function(tiles, gamestate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('play_move', Thrift.MessageType.CALL, this.seqid());
  var args = new ScrabbleCheat_play_move_args();
  args.tiles = tiles;
  args.gamestate = gamestate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScrabbleCheatClient.prototype.recv_play_move = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScrabbleCheat_play_move_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.msg) {
    return callback(result.msg);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('play_move failed: unknown result');
};
ScrabbleCheatClient.prototype.pass_turn = function(gamestate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pass_turn(gamestate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pass_turn(gamestate);
  }
};

ScrabbleCheatClient.prototype.send_pass_turn = function(gamestate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pass_turn', Thrift.MessageType.CALL, this.seqid());
  var args = new ScrabbleCheat_pass_turn_args();
  args.gamestate = gamestate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScrabbleCheatClient.prototype.recv_pass_turn = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScrabbleCheat_pass_turn_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.msg) {
    return callback(result.msg);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pass_turn failed: unknown result');
};
ScrabbleCheatClient.prototype.get_scrabblecheat_suggestions = function(rack, board, game_name, dict, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_scrabblecheat_suggestions(rack, board, game_name, dict);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_scrabblecheat_suggestions(rack, board, game_name, dict);
  }
};

ScrabbleCheatClient.prototype.send_get_scrabblecheat_suggestions = function(rack, board, game_name, dict) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_scrabblecheat_suggestions', Thrift.MessageType.CALL, this.seqid());
  var args = new ScrabbleCheat_get_scrabblecheat_suggestions_args();
  args.rack = rack;
  args.board = board;
  args.game_name = game_name;
  args.dict = dict;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ScrabbleCheatClient.prototype.recv_get_scrabblecheat_suggestions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ScrabbleCheat_get_scrabblecheat_suggestions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.msg) {
    return callback(result.msg);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_scrabblecheat_suggestions failed: unknown result');
};
ScrabbleCheatClient.prototype.quit = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_quit();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_quit();
  }
};

ScrabbleCheatClient.prototype.send_quit = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('quit', Thrift.MessageType.ONEWAY, this.seqid());
  var args = new ScrabbleCheat_quit_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
ScrabbleCheatProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ScrabbleCheatProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ScrabbleCheatProcessor.prototype.process_new_game = function(seqid, input, output) {
  var args = new ScrabbleCheat_new_game_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.new_game.length === 3) {
    Q.fcall(this._handler.new_game, args.players, args.game_name, args.dict)
      .then(function(result) {
        var result = new ScrabbleCheat_new_game_result({success: result});
        output.writeMessageBegin("new_game", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.BadArgsException) {
          var result = new ScrabbleCheat_new_game_result(err);
          output.writeMessageBegin("new_game", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("new_game", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.new_game(args.players, args.game_name, args.dict, function (err, result) {
      if (err == null || err instanceof ttypes.BadArgsException) {
        var result = new ScrabbleCheat_new_game_result((err != null ? err : {success: result}));
        output.writeMessageBegin("new_game", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("new_game", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScrabbleCheatProcessor.prototype.process_game_info = function(seqid, input, output) {
  var args = new ScrabbleCheat_game_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.game_info.length === 1) {
    Q.fcall(this._handler.game_info, args.game_name)
      .then(function(result) {
        var result = new ScrabbleCheat_game_info_result({success: result});
        output.writeMessageBegin("game_info", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.BadArgsException) {
          var result = new ScrabbleCheat_game_info_result(err);
          output.writeMessageBegin("game_info", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("game_info", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.game_info(args.game_name, function (err, result) {
      if (err == null || err instanceof ttypes.BadArgsException) {
        var result = new ScrabbleCheat_game_info_result((err != null ? err : {success: result}));
        output.writeMessageBegin("game_info", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("game_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScrabbleCheatProcessor.prototype.process_play_move = function(seqid, input, output) {
  var args = new ScrabbleCheat_play_move_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.play_move.length === 2) {
    Q.fcall(this._handler.play_move, args.tiles, args.gamestate)
      .then(function(result) {
        var result = new ScrabbleCheat_play_move_result({success: result});
        output.writeMessageBegin("play_move", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.BadArgsException) {
          var result = new ScrabbleCheat_play_move_result(err);
          output.writeMessageBegin("play_move", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("play_move", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.play_move(args.tiles, args.gamestate, function (err, result) {
      if (err == null || err instanceof ttypes.BadArgsException) {
        var result = new ScrabbleCheat_play_move_result((err != null ? err : {success: result}));
        output.writeMessageBegin("play_move", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("play_move", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScrabbleCheatProcessor.prototype.process_pass_turn = function(seqid, input, output) {
  var args = new ScrabbleCheat_pass_turn_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pass_turn.length === 1) {
    Q.fcall(this._handler.pass_turn, args.gamestate)
      .then(function(result) {
        var result = new ScrabbleCheat_pass_turn_result({success: result});
        output.writeMessageBegin("pass_turn", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.BadArgsException) {
          var result = new ScrabbleCheat_pass_turn_result(err);
          output.writeMessageBegin("pass_turn", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pass_turn", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pass_turn(args.gamestate, function (err, result) {
      if (err == null || err instanceof ttypes.BadArgsException) {
        var result = new ScrabbleCheat_pass_turn_result((err != null ? err : {success: result}));
        output.writeMessageBegin("pass_turn", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pass_turn", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScrabbleCheatProcessor.prototype.process_get_scrabblecheat_suggestions = function(seqid, input, output) {
  var args = new ScrabbleCheat_get_scrabblecheat_suggestions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_scrabblecheat_suggestions.length === 4) {
    Q.fcall(this._handler.get_scrabblecheat_suggestions, args.rack, args.board, args.game_name, args.dict)
      .then(function(result) {
        var result = new ScrabbleCheat_get_scrabblecheat_suggestions_result({success: result});
        output.writeMessageBegin("get_scrabblecheat_suggestions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.BadArgsException) {
          var result = new ScrabbleCheat_get_scrabblecheat_suggestions_result(err);
          output.writeMessageBegin("get_scrabblecheat_suggestions", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_scrabblecheat_suggestions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_scrabblecheat_suggestions(args.rack, args.board, args.game_name, args.dict, function (err, result) {
      if (err == null || err instanceof ttypes.BadArgsException) {
        var result = new ScrabbleCheat_get_scrabblecheat_suggestions_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_scrabblecheat_suggestions", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_scrabblecheat_suggestions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ScrabbleCheatProcessor.prototype.process_quit = function(seqid, input, output) {
  var args = new ScrabbleCheat_quit_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.quit()
}

