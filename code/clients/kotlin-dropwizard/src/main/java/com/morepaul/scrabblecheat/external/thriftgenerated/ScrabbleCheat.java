package com.morepaul.scrabblecheat.external.thriftgenerated;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-10")
public class ScrabbleCheat {

  public interface Iface {

    /**
     * Initiates a new game with the server.  This creates a new empty gamestate
     * with the specified players, game, and dictionary.
     * 
     * @param players
     * @param game_name
     * @param dict
     */
    public Gamestate newGame(List<String> players, GameName game_name, Dictionary dict) throws BadArgsException, org.apache.thrift.TException;

    /**
     * Returns the game info given the game's name.
     * 
     * @param game_name
     */
    public GameInfo gameInfo(GameName game_name) throws BadArgsException, org.apache.thrift.TException;

    /**
     * Plays the specified move on the board, for the player.
     * 
     * @param tiles
     * @param gamestate
     */
    public Gamestate playMove(List<Tile> tiles, Gamestate gamestate) throws BadArgsException, org.apache.thrift.TException;

    /**
     * Allows a player to "pass" on their turn, if they can't/won't make a move.
     * 
     * @param gamestate
     */
    public Gamestate passTurn(Gamestate gamestate) throws BadArgsException, org.apache.thrift.TException;

    /**
     * The good stuff.  Get a list of moves given a rack, board.
     * 
     * @param rack
     * @param board
     * @param game_name
     * @param dict
     */
    public List<Move> getScrabblecheatSuggestions(String rack, List<Tile> board, GameName game_name, Dictionary dict) throws BadArgsException, org.apache.thrift.TException;

    /**
     * Tells the server we're done here.
     */
    public void quit() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void newGame(List<String> players, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gameInfo(GameName game_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void playMove(List<Tile> tiles, Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void passTurn(Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getScrabblecheatSuggestions(String rack, List<Tile> board, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void quit(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Gamestate newGame(List<String> players, GameName game_name, Dictionary dict) throws BadArgsException, org.apache.thrift.TException
    {
      sendNewGame(players, game_name, dict);
      return recvNewGame();
    }

    public void sendNewGame(List<String> players, GameName game_name, Dictionary dict) throws org.apache.thrift.TException
    {
      new_game_args args = new new_game_args();
      args.setPlayers(players);
      args.setGameName(game_name);
      args.setDict(dict);
      sendBase("new_game", args);
    }

    public Gamestate recvNewGame() throws BadArgsException, org.apache.thrift.TException
    {
      new_game_result result = new new_game_result();
      receiveBase(result, "new_game");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.what != null) {
        throw result.what;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "new_game failed: unknown result");
    }

    public GameInfo gameInfo(GameName game_name) throws BadArgsException, org.apache.thrift.TException
    {
      sendGameInfo(game_name);
      return recvGameInfo();
    }

    public void sendGameInfo(GameName game_name) throws org.apache.thrift.TException
    {
      game_info_args args = new game_info_args();
      args.setGameName(game_name);
      sendBase("game_info", args);
    }

    public GameInfo recvGameInfo() throws BadArgsException, org.apache.thrift.TException
    {
      game_info_result result = new game_info_result();
      receiveBase(result, "game_info");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "game_info failed: unknown result");
    }

    public Gamestate playMove(List<Tile> tiles, Gamestate gamestate) throws BadArgsException, org.apache.thrift.TException
    {
      sendPlayMove(tiles, gamestate);
      return recvPlayMove();
    }

    public void sendPlayMove(List<Tile> tiles, Gamestate gamestate) throws org.apache.thrift.TException
    {
      play_move_args args = new play_move_args();
      args.setTiles(tiles);
      args.setGamestate(gamestate);
      sendBase("play_move", args);
    }

    public Gamestate recvPlayMove() throws BadArgsException, org.apache.thrift.TException
    {
      play_move_result result = new play_move_result();
      receiveBase(result, "play_move");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "play_move failed: unknown result");
    }

    public Gamestate passTurn(Gamestate gamestate) throws BadArgsException, org.apache.thrift.TException
    {
      sendPassTurn(gamestate);
      return recvPassTurn();
    }

    public void sendPassTurn(Gamestate gamestate) throws org.apache.thrift.TException
    {
      pass_turn_args args = new pass_turn_args();
      args.setGamestate(gamestate);
      sendBase("pass_turn", args);
    }

    public Gamestate recvPassTurn() throws BadArgsException, org.apache.thrift.TException
    {
      pass_turn_result result = new pass_turn_result();
      receiveBase(result, "pass_turn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pass_turn failed: unknown result");
    }

    public List<Move> getScrabblecheatSuggestions(String rack, List<Tile> board, GameName game_name, Dictionary dict) throws BadArgsException, org.apache.thrift.TException
    {
      sendGetScrabblecheatSuggestions(rack, board, game_name, dict);
      return recvGetScrabblecheatSuggestions();
    }

    public void sendGetScrabblecheatSuggestions(String rack, List<Tile> board, GameName game_name, Dictionary dict) throws org.apache.thrift.TException
    {
      get_scrabblecheat_suggestions_args args = new get_scrabblecheat_suggestions_args();
      args.setRack(rack);
      args.setBoard(board);
      args.setGameName(game_name);
      args.setDict(dict);
      sendBase("get_scrabblecheat_suggestions", args);
    }

    public List<Move> recvGetScrabblecheatSuggestions() throws BadArgsException, org.apache.thrift.TException
    {
      get_scrabblecheat_suggestions_result result = new get_scrabblecheat_suggestions_result();
      receiveBase(result, "get_scrabblecheat_suggestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_scrabblecheat_suggestions failed: unknown result");
    }

    public void quit() throws org.apache.thrift.TException
    {
      sendQuit();
    }

    public void sendQuit() throws org.apache.thrift.TException
    {
      quit_args args = new quit_args();
      sendBaseOneway("quit", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void newGame(List<String> players, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      new_game_call method_call = new new_game_call(players, game_name, dict, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class new_game_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> players;
      private GameName game_name;
      private Dictionary dict;
      public new_game_call(List<String> players, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.players = players;
        this.game_name = game_name;
        this.dict = dict;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("new_game", org.apache.thrift.protocol.TMessageType.CALL, 0));
        new_game_args args = new new_game_args();
        args.setPlayers(players);
        args.setGameName(game_name);
        args.setDict(dict);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Gamestate getResult() throws BadArgsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvNewGame();
      }
    }

    public void gameInfo(GameName game_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      game_info_call method_call = new game_info_call(game_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class game_info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GameName game_name;
      public game_info_call(GameName game_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.game_name = game_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("game_info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        game_info_args args = new game_info_args();
        args.setGameName(game_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameInfo getResult() throws BadArgsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGameInfo();
      }
    }

    public void playMove(List<Tile> tiles, Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      play_move_call method_call = new play_move_call(tiles, gamestate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class play_move_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Tile> tiles;
      private Gamestate gamestate;
      public play_move_call(List<Tile> tiles, Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tiles = tiles;
        this.gamestate = gamestate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("play_move", org.apache.thrift.protocol.TMessageType.CALL, 0));
        play_move_args args = new play_move_args();
        args.setTiles(tiles);
        args.setGamestate(gamestate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Gamestate getResult() throws BadArgsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvPlayMove();
      }
    }

    public void passTurn(Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pass_turn_call method_call = new pass_turn_call(gamestate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pass_turn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Gamestate gamestate;
      public pass_turn_call(Gamestate gamestate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gamestate = gamestate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pass_turn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pass_turn_args args = new pass_turn_args();
        args.setGamestate(gamestate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Gamestate getResult() throws BadArgsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvPassTurn();
      }
    }

    public void getScrabblecheatSuggestions(String rack, List<Tile> board, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_scrabblecheat_suggestions_call method_call = new get_scrabblecheat_suggestions_call(rack, board, game_name, dict, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_scrabblecheat_suggestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rack;
      private List<Tile> board;
      private GameName game_name;
      private Dictionary dict;
      public get_scrabblecheat_suggestions_call(String rack, List<Tile> board, GameName game_name, Dictionary dict, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rack = rack;
        this.board = board;
        this.game_name = game_name;
        this.dict = dict;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_scrabblecheat_suggestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_scrabblecheat_suggestions_args args = new get_scrabblecheat_suggestions_args();
        args.setRack(rack);
        args.setBoard(board);
        args.setGameName(game_name);
        args.setDict(dict);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Move> getResult() throws BadArgsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvGetScrabblecheatSuggestions();
      }
    }

    public void quit(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      quit_call method_call = new quit_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class quit_call extends org.apache.thrift.async.TAsyncMethodCall {
      public quit_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("quit", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        quit_args args = new quit_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("new_game", new new_game());
      processMap.put("game_info", new game_info());
      processMap.put("play_move", new play_move());
      processMap.put("pass_turn", new pass_turn());
      processMap.put("get_scrabblecheat_suggestions", new get_scrabblecheat_suggestions());
      processMap.put("quit", new quit());
      return processMap;
    }

    public static class new_game<I extends Iface> extends org.apache.thrift.ProcessFunction<I, new_game_args> {
      public new_game() {
        super("new_game");
      }

      public new_game_args getEmptyArgsInstance() {
        return new new_game_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public new_game_result getResult(I iface, new_game_args args) throws org.apache.thrift.TException {
        new_game_result result = new new_game_result();
        try {
          result.success = iface.newGame(args.players, args.game_name, args.dict);
        } catch (BadArgsException what) {
          result.what = what;
        }
        return result;
      }
    }

    public static class game_info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, game_info_args> {
      public game_info() {
        super("game_info");
      }

      public game_info_args getEmptyArgsInstance() {
        return new game_info_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public game_info_result getResult(I iface, game_info_args args) throws org.apache.thrift.TException {
        game_info_result result = new game_info_result();
        try {
          result.success = iface.gameInfo(args.game_name);
        } catch (BadArgsException msg) {
          result.msg = msg;
        }
        return result;
      }
    }

    public static class play_move<I extends Iface> extends org.apache.thrift.ProcessFunction<I, play_move_args> {
      public play_move() {
        super("play_move");
      }

      public play_move_args getEmptyArgsInstance() {
        return new play_move_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public play_move_result getResult(I iface, play_move_args args) throws org.apache.thrift.TException {
        play_move_result result = new play_move_result();
        try {
          result.success = iface.playMove(args.tiles, args.gamestate);
        } catch (BadArgsException msg) {
          result.msg = msg;
        }
        return result;
      }
    }

    public static class pass_turn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pass_turn_args> {
      public pass_turn() {
        super("pass_turn");
      }

      public pass_turn_args getEmptyArgsInstance() {
        return new pass_turn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pass_turn_result getResult(I iface, pass_turn_args args) throws org.apache.thrift.TException {
        pass_turn_result result = new pass_turn_result();
        try {
          result.success = iface.passTurn(args.gamestate);
        } catch (BadArgsException msg) {
          result.msg = msg;
        }
        return result;
      }
    }

    public static class get_scrabblecheat_suggestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_scrabblecheat_suggestions_args> {
      public get_scrabblecheat_suggestions() {
        super("get_scrabblecheat_suggestions");
      }

      public get_scrabblecheat_suggestions_args getEmptyArgsInstance() {
        return new get_scrabblecheat_suggestions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_scrabblecheat_suggestions_result getResult(I iface, get_scrabblecheat_suggestions_args args) throws org.apache.thrift.TException {
        get_scrabblecheat_suggestions_result result = new get_scrabblecheat_suggestions_result();
        try {
          result.success = iface.getScrabblecheatSuggestions(args.rack, args.board, args.game_name, args.dict);
        } catch (BadArgsException msg) {
          result.msg = msg;
        }
        return result;
      }
    }

    public static class quit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, quit_args> {
      public quit() {
        super("quit");
      }

      public quit_args getEmptyArgsInstance() {
        return new quit_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, quit_args args) throws org.apache.thrift.TException {
        iface.quit();
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("new_game", new new_game());
      processMap.put("game_info", new game_info());
      processMap.put("play_move", new play_move());
      processMap.put("pass_turn", new pass_turn());
      processMap.put("get_scrabblecheat_suggestions", new get_scrabblecheat_suggestions());
      processMap.put("quit", new quit());
      return processMap;
    }

    public static class new_game<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, new_game_args, Gamestate> {
      public new_game() {
        super("new_game");
      }

      public new_game_args getEmptyArgsInstance() {
        return new new_game_args();
      }

      public AsyncMethodCallback<Gamestate> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Gamestate>() { 
          public void onComplete(Gamestate o) {
            new_game_result result = new new_game_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            new_game_result result = new new_game_result();
            if (e instanceof BadArgsException) {
                        result.what = (BadArgsException) e;
                        result.setWhatIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, new_game_args args, org.apache.thrift.async.AsyncMethodCallback<Gamestate> resultHandler) throws TException {
        iface.newGame(args.players, args.game_name, args.dict,resultHandler);
      }
    }

    public static class game_info<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, game_info_args, GameInfo> {
      public game_info() {
        super("game_info");
      }

      public game_info_args getEmptyArgsInstance() {
        return new game_info_args();
      }

      public AsyncMethodCallback<GameInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GameInfo>() { 
          public void onComplete(GameInfo o) {
            game_info_result result = new game_info_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            game_info_result result = new game_info_result();
            if (e instanceof BadArgsException) {
                        result.msg = (BadArgsException) e;
                        result.setMsgIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, game_info_args args, org.apache.thrift.async.AsyncMethodCallback<GameInfo> resultHandler) throws TException {
        iface.gameInfo(args.game_name,resultHandler);
      }
    }

    public static class play_move<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, play_move_args, Gamestate> {
      public play_move() {
        super("play_move");
      }

      public play_move_args getEmptyArgsInstance() {
        return new play_move_args();
      }

      public AsyncMethodCallback<Gamestate> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Gamestate>() { 
          public void onComplete(Gamestate o) {
            play_move_result result = new play_move_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            play_move_result result = new play_move_result();
            if (e instanceof BadArgsException) {
                        result.msg = (BadArgsException) e;
                        result.setMsgIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, play_move_args args, org.apache.thrift.async.AsyncMethodCallback<Gamestate> resultHandler) throws TException {
        iface.playMove(args.tiles, args.gamestate,resultHandler);
      }
    }

    public static class pass_turn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pass_turn_args, Gamestate> {
      public pass_turn() {
        super("pass_turn");
      }

      public pass_turn_args getEmptyArgsInstance() {
        return new pass_turn_args();
      }

      public AsyncMethodCallback<Gamestate> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Gamestate>() { 
          public void onComplete(Gamestate o) {
            pass_turn_result result = new pass_turn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pass_turn_result result = new pass_turn_result();
            if (e instanceof BadArgsException) {
                        result.msg = (BadArgsException) e;
                        result.setMsgIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pass_turn_args args, org.apache.thrift.async.AsyncMethodCallback<Gamestate> resultHandler) throws TException {
        iface.passTurn(args.gamestate,resultHandler);
      }
    }

    public static class get_scrabblecheat_suggestions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_scrabblecheat_suggestions_args, List<Move>> {
      public get_scrabblecheat_suggestions() {
        super("get_scrabblecheat_suggestions");
      }

      public get_scrabblecheat_suggestions_args getEmptyArgsInstance() {
        return new get_scrabblecheat_suggestions_args();
      }

      public AsyncMethodCallback<List<Move>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Move>>() { 
          public void onComplete(List<Move> o) {
            get_scrabblecheat_suggestions_result result = new get_scrabblecheat_suggestions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_scrabblecheat_suggestions_result result = new get_scrabblecheat_suggestions_result();
            if (e instanceof BadArgsException) {
                        result.msg = (BadArgsException) e;
                        result.setMsgIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_scrabblecheat_suggestions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Move>> resultHandler) throws TException {
        iface.getScrabblecheatSuggestions(args.rack, args.board, args.game_name, args.dict,resultHandler);
      }
    }

    public static class quit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, quit_args, Void> {
      public quit() {
        super("quit");
      }

      public quit_args getEmptyArgsInstance() {
        return new quit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, quit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.quit(resultHandler);
      }
    }

  }

  public static class new_game_args implements org.apache.thrift.TBase<new_game_args, new_game_args._Fields>, java.io.Serializable, Cloneable, Comparable<new_game_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("new_game_args");

    private static final org.apache.thrift.protocol.TField PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("players", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField GAME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("game_name", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("dict", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new new_game_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new new_game_argsTupleSchemeFactory());
    }

    private List<String> players; // required
    private GameName game_name; // required
    private Dictionary dict; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAYERS((short)1, "players"),
      /**
       * 
       * @see GameName
       */
      GAME_NAME((short)2, "game_name"),
      /**
       * 
       * @see Dictionary
       */
      DICT((short)3, "dict");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAYERS
            return PLAYERS;
          case 2: // GAME_NAME
            return GAME_NAME;
          case 3: // DICT
            return DICT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("players", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GAME_NAME, new org.apache.thrift.meta_data.FieldMetaData("game_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameName.class)));
      tmpMap.put(_Fields.DICT, new org.apache.thrift.meta_data.FieldMetaData("dict", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Dictionary.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(new_game_args.class, metaDataMap);
    }

    public new_game_args() {
    }

    public new_game_args(
      List<String> players,
      GameName game_name,
      Dictionary dict)
    {
      this();
      this.players = players;
      this.game_name = game_name;
      this.dict = dict;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public new_game_args(new_game_args other) {
      if (other.isSetPlayers()) {
        List<String> __this__players = new ArrayList<String>(other.players);
        this.players = __this__players;
      }
      if (other.isSetGameName()) {
        this.game_name = other.game_name;
      }
      if (other.isSetDict()) {
        this.dict = other.dict;
      }
    }

    public new_game_args deepCopy() {
      return new new_game_args(this);
    }

    @Override
    public void clear() {
      this.players = null;
      this.game_name = null;
      this.dict = null;
    }

    public int getPlayersSize() {
      return (this.players == null) ? 0 : this.players.size();
    }

    public java.util.Iterator<String> getPlayersIterator() {
      return (this.players == null) ? null : this.players.iterator();
    }

    public void addToPlayers(String elem) {
      if (this.players == null) {
        this.players = new ArrayList<String>();
      }
      this.players.add(elem);
    }

    public List<String> getPlayers() {
      return this.players;
    }

    public void setPlayers(List<String> players) {
      this.players = players;
    }

    public void unsetPlayers() {
      this.players = null;
    }

    /** Returns true if field players is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayers() {
      return this.players != null;
    }

    public void setPlayersIsSet(boolean value) {
      if (!value) {
        this.players = null;
      }
    }

    /**
     * 
     * @see GameName
     */
    public GameName getGameName() {
      return this.game_name;
    }

    /**
     * 
     * @see GameName
     */
    public void setGameName(GameName game_name) {
      this.game_name = game_name;
    }

    public void unsetGameName() {
      this.game_name = null;
    }

    /** Returns true if field game_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGameName() {
      return this.game_name != null;
    }

    public void setGameNameIsSet(boolean value) {
      if (!value) {
        this.game_name = null;
      }
    }

    /**
     * 
     * @see Dictionary
     */
    public Dictionary getDict() {
      return this.dict;
    }

    /**
     * 
     * @see Dictionary
     */
    public void setDict(Dictionary dict) {
      this.dict = dict;
    }

    public void unsetDict() {
      this.dict = null;
    }

    /** Returns true if field dict is set (has been assigned a value) and false otherwise */
    public boolean isSetDict() {
      return this.dict != null;
    }

    public void setDictIsSet(boolean value) {
      if (!value) {
        this.dict = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAYERS:
        if (value == null) {
          unsetPlayers();
        } else {
          setPlayers((List<String>)value);
        }
        break;

      case GAME_NAME:
        if (value == null) {
          unsetGameName();
        } else {
          setGameName((GameName)value);
        }
        break;

      case DICT:
        if (value == null) {
          unsetDict();
        } else {
          setDict((Dictionary)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAYERS:
        return getPlayers();

      case GAME_NAME:
        return getGameName();

      case DICT:
        return getDict();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAYERS:
        return isSetPlayers();
      case GAME_NAME:
        return isSetGameName();
      case DICT:
        return isSetDict();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof new_game_args)
        return this.equals((new_game_args)that);
      return false;
    }

    public boolean equals(new_game_args that) {
      if (that == null)
        return false;

      boolean this_present_players = true && this.isSetPlayers();
      boolean that_present_players = true && that.isSetPlayers();
      if (this_present_players || that_present_players) {
        if (!(this_present_players && that_present_players))
          return false;
        if (!this.players.equals(that.players))
          return false;
      }

      boolean this_present_game_name = true && this.isSetGameName();
      boolean that_present_game_name = true && that.isSetGameName();
      if (this_present_game_name || that_present_game_name) {
        if (!(this_present_game_name && that_present_game_name))
          return false;
        if (!this.game_name.equals(that.game_name))
          return false;
      }

      boolean this_present_dict = true && this.isSetDict();
      boolean that_present_dict = true && that.isSetDict();
      if (this_present_dict || that_present_dict) {
        if (!(this_present_dict && that_present_dict))
          return false;
        if (!this.dict.equals(that.dict))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_players = true && (isSetPlayers());
      list.add(present_players);
      if (present_players)
        list.add(players);

      boolean present_game_name = true && (isSetGameName());
      list.add(present_game_name);
      if (present_game_name)
        list.add(game_name.getValue());

      boolean present_dict = true && (isSetDict());
      list.add(present_dict);
      if (present_dict)
        list.add(dict.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(new_game_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlayers()).compareTo(other.isSetPlayers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.players, other.players);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameName()).compareTo(other.isSetGameName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.game_name, other.game_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDict()).compareTo(other.isSetDict());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDict()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict, other.dict);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("new_game_args(");
      boolean first = true;

      sb.append("players:");
      if (this.players == null) {
        sb.append("null");
      } else {
        sb.append(this.players);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("game_name:");
      if (this.game_name == null) {
        sb.append("null");
      } else {
        sb.append(this.game_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dict:");
      if (this.dict == null) {
        sb.append("null");
      } else {
        sb.append(this.dict);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class new_game_argsStandardSchemeFactory implements SchemeFactory {
      public new_game_argsStandardScheme getScheme() {
        return new new_game_argsStandardScheme();
      }
    }

    private static class new_game_argsStandardScheme extends StandardScheme<new_game_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, new_game_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAYERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.players = new ArrayList<String>(_list88.size);
                  String _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readString();
                    struct.players.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setPlayersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.game_name = GameName.findByValue(iprot.readI32());
                struct.setGameNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DICT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dict = Dictionary.findByValue(iprot.readI32());
                struct.setDictIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, new_game_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.players != null) {
          oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.players.size()));
            for (String _iter91 : struct.players)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.game_name != null) {
          oprot.writeFieldBegin(GAME_NAME_FIELD_DESC);
          oprot.writeI32(struct.game_name.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dict != null) {
          oprot.writeFieldBegin(DICT_FIELD_DESC);
          oprot.writeI32(struct.dict.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class new_game_argsTupleSchemeFactory implements SchemeFactory {
      public new_game_argsTupleScheme getScheme() {
        return new new_game_argsTupleScheme();
      }
    }

    private static class new_game_argsTupleScheme extends TupleScheme<new_game_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, new_game_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlayers()) {
          optionals.set(0);
        }
        if (struct.isSetGameName()) {
          optionals.set(1);
        }
        if (struct.isSetDict()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlayers()) {
          {
            oprot.writeI32(struct.players.size());
            for (String _iter92 : struct.players)
            {
              oprot.writeString(_iter92);
            }
          }
        }
        if (struct.isSetGameName()) {
          oprot.writeI32(struct.game_name.getValue());
        }
        if (struct.isSetDict()) {
          oprot.writeI32(struct.dict.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, new_game_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.players = new ArrayList<String>(_list93.size);
            String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.players.add(_elem94);
            }
          }
          struct.setPlayersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.game_name = GameName.findByValue(iprot.readI32());
          struct.setGameNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dict = Dictionary.findByValue(iprot.readI32());
          struct.setDictIsSet(true);
        }
      }
    }

  }

  public static class new_game_result implements org.apache.thrift.TBase<new_game_result, new_game_result._Fields>, java.io.Serializable, Cloneable, Comparable<new_game_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("new_game_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField WHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("what", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new new_game_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new new_game_resultTupleSchemeFactory());
    }

    private Gamestate success; // required
    private BadArgsException what; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      WHAT((short)1, "what");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // WHAT
            return WHAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Gamestate.class)));
      tmpMap.put(_Fields.WHAT, new org.apache.thrift.meta_data.FieldMetaData("what", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(new_game_result.class, metaDataMap);
    }

    public new_game_result() {
    }

    public new_game_result(
      Gamestate success,
      BadArgsException what)
    {
      this();
      this.success = success;
      this.what = what;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public new_game_result(new_game_result other) {
      if (other.isSetSuccess()) {
        this.success = new Gamestate(other.success);
      }
      if (other.isSetWhat()) {
        this.what = new BadArgsException(other.what);
      }
    }

    public new_game_result deepCopy() {
      return new new_game_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.what = null;
    }

    public Gamestate getSuccess() {
      return this.success;
    }

    public void setSuccess(Gamestate success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadArgsException getWhat() {
      return this.what;
    }

    public void setWhat(BadArgsException what) {
      this.what = what;
    }

    public void unsetWhat() {
      this.what = null;
    }

    /** Returns true if field what is set (has been assigned a value) and false otherwise */
    public boolean isSetWhat() {
      return this.what != null;
    }

    public void setWhatIsSet(boolean value) {
      if (!value) {
        this.what = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Gamestate)value);
        }
        break;

      case WHAT:
        if (value == null) {
          unsetWhat();
        } else {
          setWhat((BadArgsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case WHAT:
        return getWhat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case WHAT:
        return isSetWhat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof new_game_result)
        return this.equals((new_game_result)that);
      return false;
    }

    public boolean equals(new_game_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_what = true && this.isSetWhat();
      boolean that_present_what = true && that.isSetWhat();
      if (this_present_what || that_present_what) {
        if (!(this_present_what && that_present_what))
          return false;
        if (!this.what.equals(that.what))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_what = true && (isSetWhat());
      list.add(present_what);
      if (present_what)
        list.add(what);

      return list.hashCode();
    }

    @Override
    public int compareTo(new_game_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhat()).compareTo(other.isSetWhat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.what, other.what);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("new_game_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("what:");
      if (this.what == null) {
        sb.append("null");
      } else {
        sb.append(this.what);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class new_game_resultStandardSchemeFactory implements SchemeFactory {
      public new_game_resultStandardScheme getScheme() {
        return new new_game_resultStandardScheme();
      }
    }

    private static class new_game_resultStandardScheme extends StandardScheme<new_game_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, new_game_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Gamestate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // WHAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.what = new BadArgsException();
                struct.what.read(iprot);
                struct.setWhatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, new_game_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.what != null) {
          oprot.writeFieldBegin(WHAT_FIELD_DESC);
          struct.what.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class new_game_resultTupleSchemeFactory implements SchemeFactory {
      public new_game_resultTupleScheme getScheme() {
        return new new_game_resultTupleScheme();
      }
    }

    private static class new_game_resultTupleScheme extends TupleScheme<new_game_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, new_game_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetWhat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetWhat()) {
          struct.what.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, new_game_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Gamestate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.what = new BadArgsException();
          struct.what.read(iprot);
          struct.setWhatIsSet(true);
        }
      }
    }

  }

  public static class game_info_args implements org.apache.thrift.TBase<game_info_args, game_info_args._Fields>, java.io.Serializable, Cloneable, Comparable<game_info_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("game_info_args");

    private static final org.apache.thrift.protocol.TField GAME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("game_name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new game_info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new game_info_argsTupleSchemeFactory());
    }

    private GameName game_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see GameName
       */
      GAME_NAME((short)1, "game_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_NAME
            return GAME_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_NAME, new org.apache.thrift.meta_data.FieldMetaData("game_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameName.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(game_info_args.class, metaDataMap);
    }

    public game_info_args() {
    }

    public game_info_args(
      GameName game_name)
    {
      this();
      this.game_name = game_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public game_info_args(game_info_args other) {
      if (other.isSetGameName()) {
        this.game_name = other.game_name;
      }
    }

    public game_info_args deepCopy() {
      return new game_info_args(this);
    }

    @Override
    public void clear() {
      this.game_name = null;
    }

    /**
     * 
     * @see GameName
     */
    public GameName getGameName() {
      return this.game_name;
    }

    /**
     * 
     * @see GameName
     */
    public void setGameName(GameName game_name) {
      this.game_name = game_name;
    }

    public void unsetGameName() {
      this.game_name = null;
    }

    /** Returns true if field game_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGameName() {
      return this.game_name != null;
    }

    public void setGameNameIsSet(boolean value) {
      if (!value) {
        this.game_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_NAME:
        if (value == null) {
          unsetGameName();
        } else {
          setGameName((GameName)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_NAME:
        return getGameName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_NAME:
        return isSetGameName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof game_info_args)
        return this.equals((game_info_args)that);
      return false;
    }

    public boolean equals(game_info_args that) {
      if (that == null)
        return false;

      boolean this_present_game_name = true && this.isSetGameName();
      boolean that_present_game_name = true && that.isSetGameName();
      if (this_present_game_name || that_present_game_name) {
        if (!(this_present_game_name && that_present_game_name))
          return false;
        if (!this.game_name.equals(that.game_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_game_name = true && (isSetGameName());
      list.add(present_game_name);
      if (present_game_name)
        list.add(game_name.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(game_info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGameName()).compareTo(other.isSetGameName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.game_name, other.game_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("game_info_args(");
      boolean first = true;

      sb.append("game_name:");
      if (this.game_name == null) {
        sb.append("null");
      } else {
        sb.append(this.game_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class game_info_argsStandardSchemeFactory implements SchemeFactory {
      public game_info_argsStandardScheme getScheme() {
        return new game_info_argsStandardScheme();
      }
    }

    private static class game_info_argsStandardScheme extends StandardScheme<game_info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, game_info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.game_name = GameName.findByValue(iprot.readI32());
                struct.setGameNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, game_info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.game_name != null) {
          oprot.writeFieldBegin(GAME_NAME_FIELD_DESC);
          oprot.writeI32(struct.game_name.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class game_info_argsTupleSchemeFactory implements SchemeFactory {
      public game_info_argsTupleScheme getScheme() {
        return new game_info_argsTupleScheme();
      }
    }

    private static class game_info_argsTupleScheme extends TupleScheme<game_info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, game_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGameName()) {
          oprot.writeI32(struct.game_name.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, game_info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.game_name = GameName.findByValue(iprot.readI32());
          struct.setGameNameIsSet(true);
        }
      }
    }

  }

  public static class game_info_result implements org.apache.thrift.TBase<game_info_result, game_info_result._Fields>, java.io.Serializable, Cloneable, Comparable<game_info_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("game_info_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new game_info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new game_info_resultTupleSchemeFactory());
    }

    private GameInfo success; // required
    private BadArgsException msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameInfo.class)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(game_info_result.class, metaDataMap);
    }

    public game_info_result() {
    }

    public game_info_result(
      GameInfo success,
      BadArgsException msg)
    {
      this();
      this.success = success;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public game_info_result(game_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameInfo(other.success);
      }
      if (other.isSetMsg()) {
        this.msg = new BadArgsException(other.msg);
      }
    }

    public game_info_result deepCopy() {
      return new game_info_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.msg = null;
    }

    public GameInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(GameInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadArgsException getMsg() {
      return this.msg;
    }

    public void setMsg(BadArgsException msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameInfo)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((BadArgsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof game_info_result)
        return this.equals((game_info_result)that);
      return false;
    }

    public boolean equals(game_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(game_info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("game_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class game_info_resultStandardSchemeFactory implements SchemeFactory {
      public game_info_resultStandardScheme getScheme() {
        return new game_info_resultStandardScheme();
      }
    }

    private static class game_info_resultStandardScheme extends StandardScheme<game_info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, game_info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GameInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new BadArgsException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, game_info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class game_info_resultTupleSchemeFactory implements SchemeFactory {
      public game_info_resultTupleScheme getScheme() {
        return new game_info_resultTupleScheme();
      }
    }

    private static class game_info_resultTupleScheme extends TupleScheme<game_info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, game_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, game_info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GameInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new BadArgsException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class play_move_args implements org.apache.thrift.TBase<play_move_args, play_move_args._Fields>, java.io.Serializable, Cloneable, Comparable<play_move_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("play_move_args");

    private static final org.apache.thrift.protocol.TField TILES_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField GAMESTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gamestate", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new play_move_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new play_move_argsTupleSchemeFactory());
    }

    private List<Tile> tiles; // required
    private Gamestate gamestate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TILES((short)1, "tiles"),
      GAMESTATE((short)2, "gamestate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TILES
            return TILES;
          case 2: // GAMESTATE
            return GAMESTATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TILES, new org.apache.thrift.meta_data.FieldMetaData("tiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tile.class))));
      tmpMap.put(_Fields.GAMESTATE, new org.apache.thrift.meta_data.FieldMetaData("gamestate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Gamestate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(play_move_args.class, metaDataMap);
    }

    public play_move_args() {
    }

    public play_move_args(
      List<Tile> tiles,
      Gamestate gamestate)
    {
      this();
      this.tiles = tiles;
      this.gamestate = gamestate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public play_move_args(play_move_args other) {
      if (other.isSetTiles()) {
        List<Tile> __this__tiles = new ArrayList<Tile>(other.tiles.size());
        for (Tile other_element : other.tiles) {
          __this__tiles.add(new Tile(other_element));
        }
        this.tiles = __this__tiles;
      }
      if (other.isSetGamestate()) {
        this.gamestate = new Gamestate(other.gamestate);
      }
    }

    public play_move_args deepCopy() {
      return new play_move_args(this);
    }

    @Override
    public void clear() {
      this.tiles = null;
      this.gamestate = null;
    }

    public int getTilesSize() {
      return (this.tiles == null) ? 0 : this.tiles.size();
    }

    public java.util.Iterator<Tile> getTilesIterator() {
      return (this.tiles == null) ? null : this.tiles.iterator();
    }

    public void addToTiles(Tile elem) {
      if (this.tiles == null) {
        this.tiles = new ArrayList<Tile>();
      }
      this.tiles.add(elem);
    }

    public List<Tile> getTiles() {
      return this.tiles;
    }

    public void setTiles(List<Tile> tiles) {
      this.tiles = tiles;
    }

    public void unsetTiles() {
      this.tiles = null;
    }

    /** Returns true if field tiles is set (has been assigned a value) and false otherwise */
    public boolean isSetTiles() {
      return this.tiles != null;
    }

    public void setTilesIsSet(boolean value) {
      if (!value) {
        this.tiles = null;
      }
    }

    public Gamestate getGamestate() {
      return this.gamestate;
    }

    public void setGamestate(Gamestate gamestate) {
      this.gamestate = gamestate;
    }

    public void unsetGamestate() {
      this.gamestate = null;
    }

    /** Returns true if field gamestate is set (has been assigned a value) and false otherwise */
    public boolean isSetGamestate() {
      return this.gamestate != null;
    }

    public void setGamestateIsSet(boolean value) {
      if (!value) {
        this.gamestate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TILES:
        if (value == null) {
          unsetTiles();
        } else {
          setTiles((List<Tile>)value);
        }
        break;

      case GAMESTATE:
        if (value == null) {
          unsetGamestate();
        } else {
          setGamestate((Gamestate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TILES:
        return getTiles();

      case GAMESTATE:
        return getGamestate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TILES:
        return isSetTiles();
      case GAMESTATE:
        return isSetGamestate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof play_move_args)
        return this.equals((play_move_args)that);
      return false;
    }

    public boolean equals(play_move_args that) {
      if (that == null)
        return false;

      boolean this_present_tiles = true && this.isSetTiles();
      boolean that_present_tiles = true && that.isSetTiles();
      if (this_present_tiles || that_present_tiles) {
        if (!(this_present_tiles && that_present_tiles))
          return false;
        if (!this.tiles.equals(that.tiles))
          return false;
      }

      boolean this_present_gamestate = true && this.isSetGamestate();
      boolean that_present_gamestate = true && that.isSetGamestate();
      if (this_present_gamestate || that_present_gamestate) {
        if (!(this_present_gamestate && that_present_gamestate))
          return false;
        if (!this.gamestate.equals(that.gamestate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tiles = true && (isSetTiles());
      list.add(present_tiles);
      if (present_tiles)
        list.add(tiles);

      boolean present_gamestate = true && (isSetGamestate());
      list.add(present_gamestate);
      if (present_gamestate)
        list.add(gamestate);

      return list.hashCode();
    }

    @Override
    public int compareTo(play_move_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTiles()).compareTo(other.isSetTiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles, other.tiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGamestate()).compareTo(other.isSetGamestate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGamestate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gamestate, other.gamestate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("play_move_args(");
      boolean first = true;

      sb.append("tiles:");
      if (this.tiles == null) {
        sb.append("null");
      } else {
        sb.append(this.tiles);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gamestate:");
      if (this.gamestate == null) {
        sb.append("null");
      } else {
        sb.append(this.gamestate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (gamestate != null) {
        gamestate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class play_move_argsStandardSchemeFactory implements SchemeFactory {
      public play_move_argsStandardScheme getScheme() {
        return new play_move_argsStandardScheme();
      }
    }

    private static class play_move_argsStandardScheme extends StandardScheme<play_move_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, play_move_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.tiles = new ArrayList<Tile>(_list96.size);
                  Tile _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new Tile();
                    _elem97.read(iprot);
                    struct.tiles.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setTilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAMESTATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gamestate = new Gamestate();
                struct.gamestate.read(iprot);
                struct.setGamestateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, play_move_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tiles != null) {
          oprot.writeFieldBegin(TILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tiles.size()));
            for (Tile _iter99 : struct.tiles)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.gamestate != null) {
          oprot.writeFieldBegin(GAMESTATE_FIELD_DESC);
          struct.gamestate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class play_move_argsTupleSchemeFactory implements SchemeFactory {
      public play_move_argsTupleScheme getScheme() {
        return new play_move_argsTupleScheme();
      }
    }

    private static class play_move_argsTupleScheme extends TupleScheme<play_move_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, play_move_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTiles()) {
          optionals.set(0);
        }
        if (struct.isSetGamestate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTiles()) {
          {
            oprot.writeI32(struct.tiles.size());
            for (Tile _iter100 : struct.tiles)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetGamestate()) {
          struct.gamestate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, play_move_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tiles = new ArrayList<Tile>(_list101.size);
            Tile _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new Tile();
              _elem102.read(iprot);
              struct.tiles.add(_elem102);
            }
          }
          struct.setTilesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gamestate = new Gamestate();
          struct.gamestate.read(iprot);
          struct.setGamestateIsSet(true);
        }
      }
    }

  }

  public static class play_move_result implements org.apache.thrift.TBase<play_move_result, play_move_result._Fields>, java.io.Serializable, Cloneable, Comparable<play_move_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("play_move_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new play_move_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new play_move_resultTupleSchemeFactory());
    }

    private Gamestate success; // required
    private BadArgsException msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Gamestate.class)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(play_move_result.class, metaDataMap);
    }

    public play_move_result() {
    }

    public play_move_result(
      Gamestate success,
      BadArgsException msg)
    {
      this();
      this.success = success;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public play_move_result(play_move_result other) {
      if (other.isSetSuccess()) {
        this.success = new Gamestate(other.success);
      }
      if (other.isSetMsg()) {
        this.msg = new BadArgsException(other.msg);
      }
    }

    public play_move_result deepCopy() {
      return new play_move_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.msg = null;
    }

    public Gamestate getSuccess() {
      return this.success;
    }

    public void setSuccess(Gamestate success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadArgsException getMsg() {
      return this.msg;
    }

    public void setMsg(BadArgsException msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Gamestate)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((BadArgsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof play_move_result)
        return this.equals((play_move_result)that);
      return false;
    }

    public boolean equals(play_move_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(play_move_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("play_move_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class play_move_resultStandardSchemeFactory implements SchemeFactory {
      public play_move_resultStandardScheme getScheme() {
        return new play_move_resultStandardScheme();
      }
    }

    private static class play_move_resultStandardScheme extends StandardScheme<play_move_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, play_move_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Gamestate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new BadArgsException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, play_move_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class play_move_resultTupleSchemeFactory implements SchemeFactory {
      public play_move_resultTupleScheme getScheme() {
        return new play_move_resultTupleScheme();
      }
    }

    private static class play_move_resultTupleScheme extends TupleScheme<play_move_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, play_move_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, play_move_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Gamestate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new BadArgsException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class pass_turn_args implements org.apache.thrift.TBase<pass_turn_args, pass_turn_args._Fields>, java.io.Serializable, Cloneable, Comparable<pass_turn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pass_turn_args");

    private static final org.apache.thrift.protocol.TField GAMESTATE_FIELD_DESC = new org.apache.thrift.protocol.TField("gamestate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pass_turn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pass_turn_argsTupleSchemeFactory());
    }

    private Gamestate gamestate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAMESTATE((short)1, "gamestate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAMESTATE
            return GAMESTATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAMESTATE, new org.apache.thrift.meta_data.FieldMetaData("gamestate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Gamestate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pass_turn_args.class, metaDataMap);
    }

    public pass_turn_args() {
    }

    public pass_turn_args(
      Gamestate gamestate)
    {
      this();
      this.gamestate = gamestate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pass_turn_args(pass_turn_args other) {
      if (other.isSetGamestate()) {
        this.gamestate = new Gamestate(other.gamestate);
      }
    }

    public pass_turn_args deepCopy() {
      return new pass_turn_args(this);
    }

    @Override
    public void clear() {
      this.gamestate = null;
    }

    public Gamestate getGamestate() {
      return this.gamestate;
    }

    public void setGamestate(Gamestate gamestate) {
      this.gamestate = gamestate;
    }

    public void unsetGamestate() {
      this.gamestate = null;
    }

    /** Returns true if field gamestate is set (has been assigned a value) and false otherwise */
    public boolean isSetGamestate() {
      return this.gamestate != null;
    }

    public void setGamestateIsSet(boolean value) {
      if (!value) {
        this.gamestate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAMESTATE:
        if (value == null) {
          unsetGamestate();
        } else {
          setGamestate((Gamestate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAMESTATE:
        return getGamestate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAMESTATE:
        return isSetGamestate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pass_turn_args)
        return this.equals((pass_turn_args)that);
      return false;
    }

    public boolean equals(pass_turn_args that) {
      if (that == null)
        return false;

      boolean this_present_gamestate = true && this.isSetGamestate();
      boolean that_present_gamestate = true && that.isSetGamestate();
      if (this_present_gamestate || that_present_gamestate) {
        if (!(this_present_gamestate && that_present_gamestate))
          return false;
        if (!this.gamestate.equals(that.gamestate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_gamestate = true && (isSetGamestate());
      list.add(present_gamestate);
      if (present_gamestate)
        list.add(gamestate);

      return list.hashCode();
    }

    @Override
    public int compareTo(pass_turn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGamestate()).compareTo(other.isSetGamestate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGamestate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gamestate, other.gamestate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pass_turn_args(");
      boolean first = true;

      sb.append("gamestate:");
      if (this.gamestate == null) {
        sb.append("null");
      } else {
        sb.append(this.gamestate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (gamestate != null) {
        gamestate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pass_turn_argsStandardSchemeFactory implements SchemeFactory {
      public pass_turn_argsStandardScheme getScheme() {
        return new pass_turn_argsStandardScheme();
      }
    }

    private static class pass_turn_argsStandardScheme extends StandardScheme<pass_turn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pass_turn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAMESTATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gamestate = new Gamestate();
                struct.gamestate.read(iprot);
                struct.setGamestateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pass_turn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gamestate != null) {
          oprot.writeFieldBegin(GAMESTATE_FIELD_DESC);
          struct.gamestate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pass_turn_argsTupleSchemeFactory implements SchemeFactory {
      public pass_turn_argsTupleScheme getScheme() {
        return new pass_turn_argsTupleScheme();
      }
    }

    private static class pass_turn_argsTupleScheme extends TupleScheme<pass_turn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pass_turn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGamestate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGamestate()) {
          struct.gamestate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pass_turn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gamestate = new Gamestate();
          struct.gamestate.read(iprot);
          struct.setGamestateIsSet(true);
        }
      }
    }

  }

  public static class pass_turn_result implements org.apache.thrift.TBase<pass_turn_result, pass_turn_result._Fields>, java.io.Serializable, Cloneable, Comparable<pass_turn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pass_turn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pass_turn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pass_turn_resultTupleSchemeFactory());
    }

    private Gamestate success; // required
    private BadArgsException msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Gamestate.class)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pass_turn_result.class, metaDataMap);
    }

    public pass_turn_result() {
    }

    public pass_turn_result(
      Gamestate success,
      BadArgsException msg)
    {
      this();
      this.success = success;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pass_turn_result(pass_turn_result other) {
      if (other.isSetSuccess()) {
        this.success = new Gamestate(other.success);
      }
      if (other.isSetMsg()) {
        this.msg = new BadArgsException(other.msg);
      }
    }

    public pass_turn_result deepCopy() {
      return new pass_turn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.msg = null;
    }

    public Gamestate getSuccess() {
      return this.success;
    }

    public void setSuccess(Gamestate success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadArgsException getMsg() {
      return this.msg;
    }

    public void setMsg(BadArgsException msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Gamestate)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((BadArgsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pass_turn_result)
        return this.equals((pass_turn_result)that);
      return false;
    }

    public boolean equals(pass_turn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(pass_turn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pass_turn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pass_turn_resultStandardSchemeFactory implements SchemeFactory {
      public pass_turn_resultStandardScheme getScheme() {
        return new pass_turn_resultStandardScheme();
      }
    }

    private static class pass_turn_resultStandardScheme extends StandardScheme<pass_turn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pass_turn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Gamestate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new BadArgsException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pass_turn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pass_turn_resultTupleSchemeFactory implements SchemeFactory {
      public pass_turn_resultTupleScheme getScheme() {
        return new pass_turn_resultTupleScheme();
      }
    }

    private static class pass_turn_resultTupleScheme extends TupleScheme<pass_turn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pass_turn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pass_turn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Gamestate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new BadArgsException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class get_scrabblecheat_suggestions_args implements org.apache.thrift.TBase<get_scrabblecheat_suggestions_args, get_scrabblecheat_suggestions_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_scrabblecheat_suggestions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scrabblecheat_suggestions_args");

    private static final org.apache.thrift.protocol.TField RACK_FIELD_DESC = new org.apache.thrift.protocol.TField("rack", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField GAME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("game_name", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("dict", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scrabblecheat_suggestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scrabblecheat_suggestions_argsTupleSchemeFactory());
    }

    private String rack; // required
    private List<Tile> board; // required
    private GameName game_name; // required
    private Dictionary dict; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RACK((short)1, "rack"),
      BOARD((short)2, "board"),
      /**
       * 
       * @see GameName
       */
      GAME_NAME((short)3, "game_name"),
      /**
       * 
       * @see Dictionary
       */
      DICT((short)4, "dict");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RACK
            return RACK;
          case 2: // BOARD
            return BOARD;
          case 3: // GAME_NAME
            return GAME_NAME;
          case 4: // DICT
            return DICT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RACK, new org.apache.thrift.meta_data.FieldMetaData("rack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "Board")));
      tmpMap.put(_Fields.GAME_NAME, new org.apache.thrift.meta_data.FieldMetaData("game_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameName.class)));
      tmpMap.put(_Fields.DICT, new org.apache.thrift.meta_data.FieldMetaData("dict", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Dictionary.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scrabblecheat_suggestions_args.class, metaDataMap);
    }

    public get_scrabblecheat_suggestions_args() {
    }

    public get_scrabblecheat_suggestions_args(
      String rack,
      List<Tile> board,
      GameName game_name,
      Dictionary dict)
    {
      this();
      this.rack = rack;
      this.board = board;
      this.game_name = game_name;
      this.dict = dict;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scrabblecheat_suggestions_args(get_scrabblecheat_suggestions_args other) {
      if (other.isSetRack()) {
        this.rack = other.rack;
      }
      if (other.isSetBoard()) {
        this.board = other.board;
      }
      if (other.isSetGameName()) {
        this.game_name = other.game_name;
      }
      if (other.isSetDict()) {
        this.dict = other.dict;
      }
    }

    public get_scrabblecheat_suggestions_args deepCopy() {
      return new get_scrabblecheat_suggestions_args(this);
    }

    @Override
    public void clear() {
      this.rack = null;
      this.board = null;
      this.game_name = null;
      this.dict = null;
    }

    public String getRack() {
      return this.rack;
    }

    public void setRack(String rack) {
      this.rack = rack;
    }

    public void unsetRack() {
      this.rack = null;
    }

    /** Returns true if field rack is set (has been assigned a value) and false otherwise */
    public boolean isSetRack() {
      return this.rack != null;
    }

    public void setRackIsSet(boolean value) {
      if (!value) {
        this.rack = null;
      }
    }

    public int getBoardSize() {
      return (this.board == null) ? 0 : this.board.size();
    }

    public java.util.Iterator<Tile> getBoardIterator() {
      return (this.board == null) ? null : this.board.iterator();
    }

    public void addToBoard(Tile elem) {
      if (this.board == null) {
        this.board = new ArrayList<Tile>();
      }
      this.board.add(elem);
    }

    public List<Tile> getBoard() {
      return this.board;
    }

    public void setBoard(List<Tile> board) {
      this.board = board;
    }

    public void unsetBoard() {
      this.board = null;
    }

    /** Returns true if field board is set (has been assigned a value) and false otherwise */
    public boolean isSetBoard() {
      return this.board != null;
    }

    public void setBoardIsSet(boolean value) {
      if (!value) {
        this.board = null;
      }
    }

    /**
     * 
     * @see GameName
     */
    public GameName getGameName() {
      return this.game_name;
    }

    /**
     * 
     * @see GameName
     */
    public void setGameName(GameName game_name) {
      this.game_name = game_name;
    }

    public void unsetGameName() {
      this.game_name = null;
    }

    /** Returns true if field game_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGameName() {
      return this.game_name != null;
    }

    public void setGameNameIsSet(boolean value) {
      if (!value) {
        this.game_name = null;
      }
    }

    /**
     * 
     * @see Dictionary
     */
    public Dictionary getDict() {
      return this.dict;
    }

    /**
     * 
     * @see Dictionary
     */
    public void setDict(Dictionary dict) {
      this.dict = dict;
    }

    public void unsetDict() {
      this.dict = null;
    }

    /** Returns true if field dict is set (has been assigned a value) and false otherwise */
    public boolean isSetDict() {
      return this.dict != null;
    }

    public void setDictIsSet(boolean value) {
      if (!value) {
        this.dict = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RACK:
        if (value == null) {
          unsetRack();
        } else {
          setRack((String)value);
        }
        break;

      case BOARD:
        if (value == null) {
          unsetBoard();
        } else {
          setBoard((List<Tile>)value);
        }
        break;

      case GAME_NAME:
        if (value == null) {
          unsetGameName();
        } else {
          setGameName((GameName)value);
        }
        break;

      case DICT:
        if (value == null) {
          unsetDict();
        } else {
          setDict((Dictionary)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RACK:
        return getRack();

      case BOARD:
        return getBoard();

      case GAME_NAME:
        return getGameName();

      case DICT:
        return getDict();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RACK:
        return isSetRack();
      case BOARD:
        return isSetBoard();
      case GAME_NAME:
        return isSetGameName();
      case DICT:
        return isSetDict();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scrabblecheat_suggestions_args)
        return this.equals((get_scrabblecheat_suggestions_args)that);
      return false;
    }

    public boolean equals(get_scrabblecheat_suggestions_args that) {
      if (that == null)
        return false;

      boolean this_present_rack = true && this.isSetRack();
      boolean that_present_rack = true && that.isSetRack();
      if (this_present_rack || that_present_rack) {
        if (!(this_present_rack && that_present_rack))
          return false;
        if (!this.rack.equals(that.rack))
          return false;
      }

      boolean this_present_board = true && this.isSetBoard();
      boolean that_present_board = true && that.isSetBoard();
      if (this_present_board || that_present_board) {
        if (!(this_present_board && that_present_board))
          return false;
        if (!this.board.equals(that.board))
          return false;
      }

      boolean this_present_game_name = true && this.isSetGameName();
      boolean that_present_game_name = true && that.isSetGameName();
      if (this_present_game_name || that_present_game_name) {
        if (!(this_present_game_name && that_present_game_name))
          return false;
        if (!this.game_name.equals(that.game_name))
          return false;
      }

      boolean this_present_dict = true && this.isSetDict();
      boolean that_present_dict = true && that.isSetDict();
      if (this_present_dict || that_present_dict) {
        if (!(this_present_dict && that_present_dict))
          return false;
        if (!this.dict.equals(that.dict))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rack = true && (isSetRack());
      list.add(present_rack);
      if (present_rack)
        list.add(rack);

      boolean present_board = true && (isSetBoard());
      list.add(present_board);
      if (present_board)
        list.add(board);

      boolean present_game_name = true && (isSetGameName());
      list.add(present_game_name);
      if (present_game_name)
        list.add(game_name.getValue());

      boolean present_dict = true && (isSetDict());
      list.add(present_dict);
      if (present_dict)
        list.add(dict.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scrabblecheat_suggestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRack()).compareTo(other.isSetRack());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRack()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack, other.rack);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBoard()).compareTo(other.isSetBoard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, other.board);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameName()).compareTo(other.isSetGameName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.game_name, other.game_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDict()).compareTo(other.isSetDict());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDict()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict, other.dict);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scrabblecheat_suggestions_args(");
      boolean first = true;

      sb.append("rack:");
      if (this.rack == null) {
        sb.append("null");
      } else {
        sb.append(this.rack);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("board:");
      if (this.board == null) {
        sb.append("null");
      } else {
        sb.append(this.board);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("game_name:");
      if (this.game_name == null) {
        sb.append("null");
      } else {
        sb.append(this.game_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dict:");
      if (this.dict == null) {
        sb.append("null");
      } else {
        sb.append(this.dict);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scrabblecheat_suggestions_argsStandardSchemeFactory implements SchemeFactory {
      public get_scrabblecheat_suggestions_argsStandardScheme getScheme() {
        return new get_scrabblecheat_suggestions_argsStandardScheme();
      }
    }

    private static class get_scrabblecheat_suggestions_argsStandardScheme extends StandardScheme<get_scrabblecheat_suggestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scrabblecheat_suggestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rack = iprot.readString();
                struct.setRackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOARD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.board = new ArrayList<Tile>(_list104.size);
                  Tile _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new Tile();
                    _elem105.read(iprot);
                    struct.board.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setBoardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GAME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.game_name = GameName.findByValue(iprot.readI32());
                struct.setGameNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DICT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dict = Dictionary.findByValue(iprot.readI32());
                struct.setDictIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scrabblecheat_suggestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rack != null) {
          oprot.writeFieldBegin(RACK_FIELD_DESC);
          oprot.writeString(struct.rack);
          oprot.writeFieldEnd();
        }
        if (struct.board != null) {
          oprot.writeFieldBegin(BOARD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.board.size()));
            for (Tile _iter107 : struct.board)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.game_name != null) {
          oprot.writeFieldBegin(GAME_NAME_FIELD_DESC);
          oprot.writeI32(struct.game_name.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.dict != null) {
          oprot.writeFieldBegin(DICT_FIELD_DESC);
          oprot.writeI32(struct.dict.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scrabblecheat_suggestions_argsTupleSchemeFactory implements SchemeFactory {
      public get_scrabblecheat_suggestions_argsTupleScheme getScheme() {
        return new get_scrabblecheat_suggestions_argsTupleScheme();
      }
    }

    private static class get_scrabblecheat_suggestions_argsTupleScheme extends TupleScheme<get_scrabblecheat_suggestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scrabblecheat_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRack()) {
          optionals.set(0);
        }
        if (struct.isSetBoard()) {
          optionals.set(1);
        }
        if (struct.isSetGameName()) {
          optionals.set(2);
        }
        if (struct.isSetDict()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRack()) {
          oprot.writeString(struct.rack);
        }
        if (struct.isSetBoard()) {
          {
            oprot.writeI32(struct.board.size());
            for (Tile _iter108 : struct.board)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetGameName()) {
          oprot.writeI32(struct.game_name.getValue());
        }
        if (struct.isSetDict()) {
          oprot.writeI32(struct.dict.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scrabblecheat_suggestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rack = iprot.readString();
          struct.setRackIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.board = new ArrayList<Tile>(_list109.size);
            Tile _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new Tile();
              _elem110.read(iprot);
              struct.board.add(_elem110);
            }
          }
          struct.setBoardIsSet(true);
        }
        if (incoming.get(2)) {
          struct.game_name = GameName.findByValue(iprot.readI32());
          struct.setGameNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dict = Dictionary.findByValue(iprot.readI32());
          struct.setDictIsSet(true);
        }
      }
    }

  }

  public static class get_scrabblecheat_suggestions_result implements org.apache.thrift.TBase<get_scrabblecheat_suggestions_result, get_scrabblecheat_suggestions_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_scrabblecheat_suggestions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_scrabblecheat_suggestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_scrabblecheat_suggestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_scrabblecheat_suggestions_resultTupleSchemeFactory());
    }

    private List<Move> success; // required
    private BadArgsException msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Move.class))));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_scrabblecheat_suggestions_result.class, metaDataMap);
    }

    public get_scrabblecheat_suggestions_result() {
    }

    public get_scrabblecheat_suggestions_result(
      List<Move> success,
      BadArgsException msg)
    {
      this();
      this.success = success;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_scrabblecheat_suggestions_result(get_scrabblecheat_suggestions_result other) {
      if (other.isSetSuccess()) {
        List<Move> __this__success = new ArrayList<Move>(other.success.size());
        for (Move other_element : other.success) {
          __this__success.add(new Move(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMsg()) {
        this.msg = new BadArgsException(other.msg);
      }
    }

    public get_scrabblecheat_suggestions_result deepCopy() {
      return new get_scrabblecheat_suggestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.msg = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Move> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Move elem) {
      if (this.success == null) {
        this.success = new ArrayList<Move>();
      }
      this.success.add(elem);
    }

    public List<Move> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Move> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadArgsException getMsg() {
      return this.msg;
    }

    public void setMsg(BadArgsException msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Move>)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((BadArgsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_scrabblecheat_suggestions_result)
        return this.equals((get_scrabblecheat_suggestions_result)that);
      return false;
    }

    public boolean equals(get_scrabblecheat_suggestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_scrabblecheat_suggestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_scrabblecheat_suggestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_scrabblecheat_suggestions_resultStandardSchemeFactory implements SchemeFactory {
      public get_scrabblecheat_suggestions_resultStandardScheme getScheme() {
        return new get_scrabblecheat_suggestions_resultStandardScheme();
      }
    }

    private static class get_scrabblecheat_suggestions_resultStandardScheme extends StandardScheme<get_scrabblecheat_suggestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_scrabblecheat_suggestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<Move>(_list112.size);
                  Move _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new Move();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new BadArgsException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_scrabblecheat_suggestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Move _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_scrabblecheat_suggestions_resultTupleSchemeFactory implements SchemeFactory {
      public get_scrabblecheat_suggestions_resultTupleScheme getScheme() {
        return new get_scrabblecheat_suggestions_resultTupleScheme();
      }
    }

    private static class get_scrabblecheat_suggestions_resultTupleScheme extends TupleScheme<get_scrabblecheat_suggestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_scrabblecheat_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Move _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_scrabblecheat_suggestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Move>(_list117.size);
            Move _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new Move();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new BadArgsException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class quit_args implements org.apache.thrift.TBase<quit_args, quit_args._Fields>, java.io.Serializable, Cloneable, Comparable<quit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quit_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new quit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new quit_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quit_args.class, metaDataMap);
    }

    public quit_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quit_args(quit_args other) {
    }

    public quit_args deepCopy() {
      return new quit_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof quit_args)
        return this.equals((quit_args)that);
      return false;
    }

    public boolean equals(quit_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(quit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("quit_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quit_argsStandardSchemeFactory implements SchemeFactory {
      public quit_argsStandardScheme getScheme() {
        return new quit_argsStandardScheme();
      }
    }

    private static class quit_argsStandardScheme extends StandardScheme<quit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quit_argsTupleSchemeFactory implements SchemeFactory {
      public quit_argsTupleScheme getScheme() {
        return new quit_argsTupleScheme();
      }
    }

    private static class quit_argsTupleScheme extends TupleScheme<quit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
