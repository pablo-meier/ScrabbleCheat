package com.morepaul.scrabblecheat.external.thriftgenerated;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Basic datatype for a tile on the board.  'row' and 'col' are 1-indexed.
 * If the tile is empty the string is empty and LetterType is EMPTY.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-10")
public class Tile implements org.apache.thrift.TBase<Tile, Tile._Fields>, java.io.Serializable, Cloneable, Comparable<Tile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tile");

  private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField COL_FIELD_DESC = new org.apache.thrift.protocol.TField("col", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LETTER_FIELD_DESC = new org.apache.thrift.protocol.TField("letter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bonus", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TileTupleSchemeFactory());
  }

  private byte row; // required
  private byte col; // required
  private LetterType type; // required
  private String letter; // required
  private Bonus bonus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW((short)1, "row"),
    COL((short)2, "col"),
    /**
     * 
     * @see LetterType
     */
    TYPE((short)3, "type"),
    LETTER((short)4, "letter"),
    /**
     * 
     * @see Bonus
     */
    BONUS((short)5, "bonus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW
          return ROW;
        case 2: // COL
          return COL;
        case 3: // TYPE
          return TYPE;
        case 4: // LETTER
          return LETTER;
        case 5: // BONUS
          return BONUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROW_ISSET_ID = 0;
  private static final int __COL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COL, new org.apache.thrift.meta_data.FieldMetaData("col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LetterType.class)));
    tmpMap.put(_Fields.LETTER, new org.apache.thrift.meta_data.FieldMetaData("letter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BONUS, new org.apache.thrift.meta_data.FieldMetaData("bonus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Bonus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tile.class, metaDataMap);
  }

  public Tile() {
  }

  public Tile(
    byte row,
    byte col,
    LetterType type,
    String letter,
    Bonus bonus)
  {
    this();
    this.row = row;
    setRowIsSet(true);
    this.col = col;
    setColIsSet(true);
    this.type = type;
    this.letter = letter;
    this.bonus = bonus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tile(Tile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.row = other.row;
    this.col = other.col;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetLetter()) {
      this.letter = other.letter;
    }
    if (other.isSetBonus()) {
      this.bonus = other.bonus;
    }
  }

  public Tile deepCopy() {
    return new Tile(this);
  }

  @Override
  public void clear() {
    setRowIsSet(false);
    this.row = 0;
    setColIsSet(false);
    this.col = 0;
    this.type = null;
    this.letter = null;
    this.bonus = null;
  }

  public byte getRow() {
    return this.row;
  }

  public void setRow(byte row) {
    this.row = row;
    setRowIsSet(true);
  }

  public void unsetRow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROW_ISSET_ID);
  }

  /** Returns true if field row is set (has been assigned a value) and false otherwise */
  public boolean isSetRow() {
    return EncodingUtils.testBit(__isset_bitfield, __ROW_ISSET_ID);
  }

  public void setRowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROW_ISSET_ID, value);
  }

  public byte getCol() {
    return this.col;
  }

  public void setCol(byte col) {
    this.col = col;
    setColIsSet(true);
  }

  public void unsetCol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COL_ISSET_ID);
  }

  /** Returns true if field col is set (has been assigned a value) and false otherwise */
  public boolean isSetCol() {
    return EncodingUtils.testBit(__isset_bitfield, __COL_ISSET_ID);
  }

  public void setColIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COL_ISSET_ID, value);
  }

  /**
   * 
   * @see LetterType
   */
  public LetterType getType() {
    return this.type;
  }

  /**
   * 
   * @see LetterType
   */
  public void setType(LetterType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getLetter() {
    return this.letter;
  }

  public void setLetter(String letter) {
    this.letter = letter;
  }

  public void unsetLetter() {
    this.letter = null;
  }

  /** Returns true if field letter is set (has been assigned a value) and false otherwise */
  public boolean isSetLetter() {
    return this.letter != null;
  }

  public void setLetterIsSet(boolean value) {
    if (!value) {
      this.letter = null;
    }
  }

  /**
   * 
   * @see Bonus
   */
  public Bonus getBonus() {
    return this.bonus;
  }

  /**
   * 
   * @see Bonus
   */
  public void setBonus(Bonus bonus) {
    this.bonus = bonus;
  }

  public void unsetBonus() {
    this.bonus = null;
  }

  /** Returns true if field bonus is set (has been assigned a value) and false otherwise */
  public boolean isSetBonus() {
    return this.bonus != null;
  }

  public void setBonusIsSet(boolean value) {
    if (!value) {
      this.bonus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW:
      if (value == null) {
        unsetRow();
      } else {
        setRow((Byte)value);
      }
      break;

    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((Byte)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((LetterType)value);
      }
      break;

    case LETTER:
      if (value == null) {
        unsetLetter();
      } else {
        setLetter((String)value);
      }
      break;

    case BONUS:
      if (value == null) {
        unsetBonus();
      } else {
        setBonus((Bonus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW:
      return getRow();

    case COL:
      return getCol();

    case TYPE:
      return getType();

    case LETTER:
      return getLetter();

    case BONUS:
      return getBonus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROW:
      return isSetRow();
    case COL:
      return isSetCol();
    case TYPE:
      return isSetType();
    case LETTER:
      return isSetLetter();
    case BONUS:
      return isSetBonus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tile)
      return this.equals((Tile)that);
    return false;
  }

  public boolean equals(Tile that) {
    if (that == null)
      return false;

    boolean this_present_row = true;
    boolean that_present_row = true;
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (this.row != that.row)
        return false;
    }

    boolean this_present_col = true;
    boolean that_present_col = true;
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (this.col != that.col)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_letter = true && this.isSetLetter();
    boolean that_present_letter = true && that.isSetLetter();
    if (this_present_letter || that_present_letter) {
      if (!(this_present_letter && that_present_letter))
        return false;
      if (!this.letter.equals(that.letter))
        return false;
    }

    boolean this_present_bonus = true && this.isSetBonus();
    boolean that_present_bonus = true && that.isSetBonus();
    if (this_present_bonus || that_present_bonus) {
      if (!(this_present_bonus && that_present_bonus))
        return false;
      if (!this.bonus.equals(that.bonus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_row = true;
    list.add(present_row);
    if (present_row)
      list.add(row);

    boolean present_col = true;
    list.add(present_col);
    if (present_col)
      list.add(col);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_letter = true && (isSetLetter());
    list.add(present_letter);
    if (present_letter)
      list.add(letter);

    boolean present_bonus = true && (isSetBonus());
    list.add(present_bonus);
    if (present_bonus)
      list.add(bonus.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Tile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRow()).compareTo(other.isSetRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, other.row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol()).compareTo(other.isSetCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col, other.col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLetter()).compareTo(other.isSetLetter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLetter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.letter, other.letter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBonus()).compareTo(other.isSetBonus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBonus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bonus, other.bonus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tile(");
    boolean first = true;

    sb.append("row:");
    sb.append(this.row);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col:");
    sb.append(this.col);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("letter:");
    if (this.letter == null) {
      sb.append("null");
    } else {
      sb.append(this.letter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bonus:");
    if (this.bonus == null) {
      sb.append("null");
    } else {
      sb.append(this.bonus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TileStandardSchemeFactory implements SchemeFactory {
    public TileStandardScheme getScheme() {
      return new TileStandardScheme();
    }
  }

  private static class TileStandardScheme extends StandardScheme<Tile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.row = iprot.readByte();
              struct.setRowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.col = iprot.readByte();
              struct.setColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = LetterType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LETTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.letter = iprot.readString();
              struct.setLetterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BONUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bonus = Bonus.findByValue(iprot.readI32());
              struct.setBonusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROW_FIELD_DESC);
      oprot.writeByte(struct.row);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COL_FIELD_DESC);
      oprot.writeByte(struct.col);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.letter != null) {
        oprot.writeFieldBegin(LETTER_FIELD_DESC);
        oprot.writeString(struct.letter);
        oprot.writeFieldEnd();
      }
      if (struct.bonus != null) {
        oprot.writeFieldBegin(BONUS_FIELD_DESC);
        oprot.writeI32(struct.bonus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TileTupleSchemeFactory implements SchemeFactory {
    public TileTupleScheme getScheme() {
      return new TileTupleScheme();
    }
  }

  private static class TileTupleScheme extends TupleScheme<Tile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRow()) {
        optionals.set(0);
      }
      if (struct.isSetCol()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetLetter()) {
        optionals.set(3);
      }
      if (struct.isSetBonus()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRow()) {
        oprot.writeByte(struct.row);
      }
      if (struct.isSetCol()) {
        oprot.writeByte(struct.col);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetLetter()) {
        oprot.writeString(struct.letter);
      }
      if (struct.isSetBonus()) {
        oprot.writeI32(struct.bonus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.row = iprot.readByte();
        struct.setRowIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col = iprot.readByte();
        struct.setColIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = LetterType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.letter = iprot.readString();
        struct.setLetterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bonus = Bonus.findByValue(iprot.readI32());
        struct.setBonusIsSet(true);
      }
    }
  }

}

