package com.morepaul.scrabblecheat.external.thriftgenerated;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-10")
public class GameInfo implements org.apache.thrift.TBase<GameInfo, GameInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GameInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RACK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("rack_size", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField BINGO_BONUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bingo_bonus", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LETTER_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("letter_distribution", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SCORE_DISTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("score_distribution", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField ALLOWED_DICTIONARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowed_dictionaries", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField BOARD_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("board_template", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameInfoTupleSchemeFactory());
  }

  private GameName name; // required
  private byte rack_size; // required
  private Map<Byte,Integer> bingo_bonus; // required
  private Map<String,Byte> letter_distribution; // required
  private Map<String,Byte> score_distribution; // required
  private List<Dictionary> allowed_dictionaries; // required
  private List<Tile> board_template; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see GameName
     */
    NAME((short)1, "name"),
    RACK_SIZE((short)2, "rack_size"),
    BINGO_BONUS((short)3, "bingo_bonus"),
    LETTER_DISTRIBUTION((short)4, "letter_distribution"),
    SCORE_DISTRIBUTION((short)5, "score_distribution"),
    ALLOWED_DICTIONARIES((short)6, "allowed_dictionaries"),
    BOARD_TEMPLATE((short)7, "board_template");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // RACK_SIZE
          return RACK_SIZE;
        case 3: // BINGO_BONUS
          return BINGO_BONUS;
        case 4: // LETTER_DISTRIBUTION
          return LETTER_DISTRIBUTION;
        case 5: // SCORE_DISTRIBUTION
          return SCORE_DISTRIBUTION;
        case 6: // ALLOWED_DICTIONARIES
          return ALLOWED_DICTIONARIES;
        case 7: // BOARD_TEMPLATE
          return BOARD_TEMPLATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RACK_SIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GameName.class)));
    tmpMap.put(_Fields.RACK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("rack_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BINGO_BONUS, new org.apache.thrift.meta_data.FieldMetaData("bingo_bonus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LETTER_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("letter_distribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SCORE_DISTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("score_distribution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.ALLOWED_DICTIONARIES, new org.apache.thrift.meta_data.FieldMetaData("allowed_dictionaries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Dictionary.class))));
    tmpMap.put(_Fields.BOARD_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("board_template", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Board")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameInfo.class, metaDataMap);
  }

  public GameInfo() {
  }

  public GameInfo(
    GameName name,
    byte rack_size,
    Map<Byte,Integer> bingo_bonus,
    Map<String,Byte> letter_distribution,
    Map<String,Byte> score_distribution,
    List<Dictionary> allowed_dictionaries,
    List<Tile> board_template)
  {
    this();
    this.name = name;
    this.rack_size = rack_size;
    setRackSizeIsSet(true);
    this.bingo_bonus = bingo_bonus;
    this.letter_distribution = letter_distribution;
    this.score_distribution = score_distribution;
    this.allowed_dictionaries = allowed_dictionaries;
    this.board_template = board_template;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameInfo(GameInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.rack_size = other.rack_size;
    if (other.isSetBingoBonus()) {
      Map<Byte,Integer> __this__bingo_bonus = new HashMap<Byte,Integer>(other.bingo_bonus);
      this.bingo_bonus = __this__bingo_bonus;
    }
    if (other.isSetLetterDistribution()) {
      Map<String,Byte> __this__letter_distribution = new HashMap<String,Byte>(other.letter_distribution);
      this.letter_distribution = __this__letter_distribution;
    }
    if (other.isSetScoreDistribution()) {
      Map<String,Byte> __this__score_distribution = new HashMap<String,Byte>(other.score_distribution);
      this.score_distribution = __this__score_distribution;
    }
    if (other.isSetAllowedDictionaries()) {
      List<Dictionary> __this__allowed_dictionaries = new ArrayList<Dictionary>(other.allowed_dictionaries.size());
      for (Dictionary other_element : other.allowed_dictionaries) {
        __this__allowed_dictionaries.add(other_element);
      }
      this.allowed_dictionaries = __this__allowed_dictionaries;
    }
    if (other.isSetBoardTemplate()) {
      this.board_template = other.board_template;
    }
  }

  public GameInfo deepCopy() {
    return new GameInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setRackSizeIsSet(false);
    this.rack_size = 0;
    this.bingo_bonus = null;
    this.letter_distribution = null;
    this.score_distribution = null;
    this.allowed_dictionaries = null;
    this.board_template = null;
  }

  /**
   * 
   * @see GameName
   */
  public GameName getName() {
    return this.name;
  }

  /**
   * 
   * @see GameName
   */
  public void setName(GameName name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getRackSize() {
    return this.rack_size;
  }

  public void setRackSize(byte rack_size) {
    this.rack_size = rack_size;
    setRackSizeIsSet(true);
  }

  public void unsetRackSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RACK_SIZE_ISSET_ID);
  }

  /** Returns true if field rack_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRackSize() {
    return EncodingUtils.testBit(__isset_bitfield, __RACK_SIZE_ISSET_ID);
  }

  public void setRackSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RACK_SIZE_ISSET_ID, value);
  }

  public int getBingoBonusSize() {
    return (this.bingo_bonus == null) ? 0 : this.bingo_bonus.size();
  }

  public void putToBingoBonus(byte key, int val) {
    if (this.bingo_bonus == null) {
      this.bingo_bonus = new HashMap<Byte,Integer>();
    }
    this.bingo_bonus.put(key, val);
  }

  public Map<Byte,Integer> getBingoBonus() {
    return this.bingo_bonus;
  }

  public void setBingoBonus(Map<Byte,Integer> bingo_bonus) {
    this.bingo_bonus = bingo_bonus;
  }

  public void unsetBingoBonus() {
    this.bingo_bonus = null;
  }

  /** Returns true if field bingo_bonus is set (has been assigned a value) and false otherwise */
  public boolean isSetBingoBonus() {
    return this.bingo_bonus != null;
  }

  public void setBingoBonusIsSet(boolean value) {
    if (!value) {
      this.bingo_bonus = null;
    }
  }

  public int getLetterDistributionSize() {
    return (this.letter_distribution == null) ? 0 : this.letter_distribution.size();
  }

  public void putToLetterDistribution(String key, byte val) {
    if (this.letter_distribution == null) {
      this.letter_distribution = new HashMap<String,Byte>();
    }
    this.letter_distribution.put(key, val);
  }

  public Map<String,Byte> getLetterDistribution() {
    return this.letter_distribution;
  }

  public void setLetterDistribution(Map<String,Byte> letter_distribution) {
    this.letter_distribution = letter_distribution;
  }

  public void unsetLetterDistribution() {
    this.letter_distribution = null;
  }

  /** Returns true if field letter_distribution is set (has been assigned a value) and false otherwise */
  public boolean isSetLetterDistribution() {
    return this.letter_distribution != null;
  }

  public void setLetterDistributionIsSet(boolean value) {
    if (!value) {
      this.letter_distribution = null;
    }
  }

  public int getScoreDistributionSize() {
    return (this.score_distribution == null) ? 0 : this.score_distribution.size();
  }

  public void putToScoreDistribution(String key, byte val) {
    if (this.score_distribution == null) {
      this.score_distribution = new HashMap<String,Byte>();
    }
    this.score_distribution.put(key, val);
  }

  public Map<String,Byte> getScoreDistribution() {
    return this.score_distribution;
  }

  public void setScoreDistribution(Map<String,Byte> score_distribution) {
    this.score_distribution = score_distribution;
  }

  public void unsetScoreDistribution() {
    this.score_distribution = null;
  }

  /** Returns true if field score_distribution is set (has been assigned a value) and false otherwise */
  public boolean isSetScoreDistribution() {
    return this.score_distribution != null;
  }

  public void setScoreDistributionIsSet(boolean value) {
    if (!value) {
      this.score_distribution = null;
    }
  }

  public int getAllowedDictionariesSize() {
    return (this.allowed_dictionaries == null) ? 0 : this.allowed_dictionaries.size();
  }

  public java.util.Iterator<Dictionary> getAllowedDictionariesIterator() {
    return (this.allowed_dictionaries == null) ? null : this.allowed_dictionaries.iterator();
  }

  public void addToAllowedDictionaries(Dictionary elem) {
    if (this.allowed_dictionaries == null) {
      this.allowed_dictionaries = new ArrayList<Dictionary>();
    }
    this.allowed_dictionaries.add(elem);
  }

  public List<Dictionary> getAllowedDictionaries() {
    return this.allowed_dictionaries;
  }

  public void setAllowedDictionaries(List<Dictionary> allowed_dictionaries) {
    this.allowed_dictionaries = allowed_dictionaries;
  }

  public void unsetAllowedDictionaries() {
    this.allowed_dictionaries = null;
  }

  /** Returns true if field allowed_dictionaries is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedDictionaries() {
    return this.allowed_dictionaries != null;
  }

  public void setAllowedDictionariesIsSet(boolean value) {
    if (!value) {
      this.allowed_dictionaries = null;
    }
  }

  public int getBoardTemplateSize() {
    return (this.board_template == null) ? 0 : this.board_template.size();
  }

  public java.util.Iterator<Tile> getBoardTemplateIterator() {
    return (this.board_template == null) ? null : this.board_template.iterator();
  }

  public void addToBoardTemplate(Tile elem) {
    if (this.board_template == null) {
      this.board_template = new ArrayList<Tile>();
    }
    this.board_template.add(elem);
  }

  public List<Tile> getBoardTemplate() {
    return this.board_template;
  }

  public void setBoardTemplate(List<Tile> board_template) {
    this.board_template = board_template;
  }

  public void unsetBoardTemplate() {
    this.board_template = null;
  }

  /** Returns true if field board_template is set (has been assigned a value) and false otherwise */
  public boolean isSetBoardTemplate() {
    return this.board_template != null;
  }

  public void setBoardTemplateIsSet(boolean value) {
    if (!value) {
      this.board_template = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((GameName)value);
      }
      break;

    case RACK_SIZE:
      if (value == null) {
        unsetRackSize();
      } else {
        setRackSize((Byte)value);
      }
      break;

    case BINGO_BONUS:
      if (value == null) {
        unsetBingoBonus();
      } else {
        setBingoBonus((Map<Byte,Integer>)value);
      }
      break;

    case LETTER_DISTRIBUTION:
      if (value == null) {
        unsetLetterDistribution();
      } else {
        setLetterDistribution((Map<String,Byte>)value);
      }
      break;

    case SCORE_DISTRIBUTION:
      if (value == null) {
        unsetScoreDistribution();
      } else {
        setScoreDistribution((Map<String,Byte>)value);
      }
      break;

    case ALLOWED_DICTIONARIES:
      if (value == null) {
        unsetAllowedDictionaries();
      } else {
        setAllowedDictionaries((List<Dictionary>)value);
      }
      break;

    case BOARD_TEMPLATE:
      if (value == null) {
        unsetBoardTemplate();
      } else {
        setBoardTemplate((List<Tile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case RACK_SIZE:
      return getRackSize();

    case BINGO_BONUS:
      return getBingoBonus();

    case LETTER_DISTRIBUTION:
      return getLetterDistribution();

    case SCORE_DISTRIBUTION:
      return getScoreDistribution();

    case ALLOWED_DICTIONARIES:
      return getAllowedDictionaries();

    case BOARD_TEMPLATE:
      return getBoardTemplate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case RACK_SIZE:
      return isSetRackSize();
    case BINGO_BONUS:
      return isSetBingoBonus();
    case LETTER_DISTRIBUTION:
      return isSetLetterDistribution();
    case SCORE_DISTRIBUTION:
      return isSetScoreDistribution();
    case ALLOWED_DICTIONARIES:
      return isSetAllowedDictionaries();
    case BOARD_TEMPLATE:
      return isSetBoardTemplate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameInfo)
      return this.equals((GameInfo)that);
    return false;
  }

  public boolean equals(GameInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_rack_size = true;
    boolean that_present_rack_size = true;
    if (this_present_rack_size || that_present_rack_size) {
      if (!(this_present_rack_size && that_present_rack_size))
        return false;
      if (this.rack_size != that.rack_size)
        return false;
    }

    boolean this_present_bingo_bonus = true && this.isSetBingoBonus();
    boolean that_present_bingo_bonus = true && that.isSetBingoBonus();
    if (this_present_bingo_bonus || that_present_bingo_bonus) {
      if (!(this_present_bingo_bonus && that_present_bingo_bonus))
        return false;
      if (!this.bingo_bonus.equals(that.bingo_bonus))
        return false;
    }

    boolean this_present_letter_distribution = true && this.isSetLetterDistribution();
    boolean that_present_letter_distribution = true && that.isSetLetterDistribution();
    if (this_present_letter_distribution || that_present_letter_distribution) {
      if (!(this_present_letter_distribution && that_present_letter_distribution))
        return false;
      if (!this.letter_distribution.equals(that.letter_distribution))
        return false;
    }

    boolean this_present_score_distribution = true && this.isSetScoreDistribution();
    boolean that_present_score_distribution = true && that.isSetScoreDistribution();
    if (this_present_score_distribution || that_present_score_distribution) {
      if (!(this_present_score_distribution && that_present_score_distribution))
        return false;
      if (!this.score_distribution.equals(that.score_distribution))
        return false;
    }

    boolean this_present_allowed_dictionaries = true && this.isSetAllowedDictionaries();
    boolean that_present_allowed_dictionaries = true && that.isSetAllowedDictionaries();
    if (this_present_allowed_dictionaries || that_present_allowed_dictionaries) {
      if (!(this_present_allowed_dictionaries && that_present_allowed_dictionaries))
        return false;
      if (!this.allowed_dictionaries.equals(that.allowed_dictionaries))
        return false;
    }

    boolean this_present_board_template = true && this.isSetBoardTemplate();
    boolean that_present_board_template = true && that.isSetBoardTemplate();
    if (this_present_board_template || that_present_board_template) {
      if (!(this_present_board_template && that_present_board_template))
        return false;
      if (!this.board_template.equals(that.board_template))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name.getValue());

    boolean present_rack_size = true;
    list.add(present_rack_size);
    if (present_rack_size)
      list.add(rack_size);

    boolean present_bingo_bonus = true && (isSetBingoBonus());
    list.add(present_bingo_bonus);
    if (present_bingo_bonus)
      list.add(bingo_bonus);

    boolean present_letter_distribution = true && (isSetLetterDistribution());
    list.add(present_letter_distribution);
    if (present_letter_distribution)
      list.add(letter_distribution);

    boolean present_score_distribution = true && (isSetScoreDistribution());
    list.add(present_score_distribution);
    if (present_score_distribution)
      list.add(score_distribution);

    boolean present_allowed_dictionaries = true && (isSetAllowedDictionaries());
    list.add(present_allowed_dictionaries);
    if (present_allowed_dictionaries)
      list.add(allowed_dictionaries);

    boolean present_board_template = true && (isSetBoardTemplate());
    list.add(present_board_template);
    if (present_board_template)
      list.add(board_template);

    return list.hashCode();
  }

  @Override
  public int compareTo(GameInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRackSize()).compareTo(other.isSetRackSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRackSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack_size, other.rack_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBingoBonus()).compareTo(other.isSetBingoBonus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBingoBonus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bingo_bonus, other.bingo_bonus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLetterDistribution()).compareTo(other.isSetLetterDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLetterDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.letter_distribution, other.letter_distribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoreDistribution()).compareTo(other.isSetScoreDistribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoreDistribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score_distribution, other.score_distribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowedDictionaries()).compareTo(other.isSetAllowedDictionaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedDictionaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowed_dictionaries, other.allowed_dictionaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoardTemplate()).compareTo(other.isSetBoardTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoardTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board_template, other.board_template);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rack_size:");
    sb.append(this.rack_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bingo_bonus:");
    if (this.bingo_bonus == null) {
      sb.append("null");
    } else {
      sb.append(this.bingo_bonus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("letter_distribution:");
    if (this.letter_distribution == null) {
      sb.append("null");
    } else {
      sb.append(this.letter_distribution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score_distribution:");
    if (this.score_distribution == null) {
      sb.append("null");
    } else {
      sb.append(this.score_distribution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowed_dictionaries:");
    if (this.allowed_dictionaries == null) {
      sb.append("null");
    } else {
      sb.append(this.allowed_dictionaries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("board_template:");
    if (this.board_template == null) {
      sb.append("null");
    } else {
      sb.append(this.board_template);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameInfoStandardSchemeFactory implements SchemeFactory {
    public GameInfoStandardScheme getScheme() {
      return new GameInfoStandardScheme();
    }
  }

  private static class GameInfoStandardScheme extends StandardScheme<GameInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.name = GameName.findByValue(iprot.readI32());
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RACK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.rack_size = iprot.readByte();
              struct.setRackSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BINGO_BONUS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.bingo_bonus = new HashMap<Byte,Integer>(2*_map8.size);
                byte _key9;
                int _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readByte();
                  _val10 = iprot.readI32();
                  struct.bingo_bonus.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setBingoBonusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LETTER_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.letter_distribution = new HashMap<String,Byte>(2*_map12.size);
                String _key13;
                byte _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readString();
                  _val14 = iprot.readByte();
                  struct.letter_distribution.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setLetterDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCORE_DISTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.score_distribution = new HashMap<String,Byte>(2*_map16.size);
                String _key17;
                byte _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = iprot.readByte();
                  struct.score_distribution.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setScoreDistributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALLOWED_DICTIONARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.allowed_dictionaries = new ArrayList<Dictionary>(_list20.size);
                Dictionary _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = Dictionary.findByValue(iprot.readI32());
                  struct.allowed_dictionaries.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setAllowedDictionariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BOARD_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.board_template = new ArrayList<Tile>(_list23.size);
                Tile _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = new Tile();
                  _elem24.read(iprot);
                  struct.board_template.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setBoardTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RACK_SIZE_FIELD_DESC);
      oprot.writeByte(struct.rack_size);
      oprot.writeFieldEnd();
      if (struct.bingo_bonus != null) {
        oprot.writeFieldBegin(BINGO_BONUS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, struct.bingo_bonus.size()));
          for (Map.Entry<Byte, Integer> _iter26 : struct.bingo_bonus.entrySet())
          {
            oprot.writeByte(_iter26.getKey());
            oprot.writeI32(_iter26.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.letter_distribution != null) {
        oprot.writeFieldBegin(LETTER_DISTRIBUTION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, struct.letter_distribution.size()));
          for (Map.Entry<String, Byte> _iter27 : struct.letter_distribution.entrySet())
          {
            oprot.writeString(_iter27.getKey());
            oprot.writeByte(_iter27.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.score_distribution != null) {
        oprot.writeFieldBegin(SCORE_DISTRIBUTION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, struct.score_distribution.size()));
          for (Map.Entry<String, Byte> _iter28 : struct.score_distribution.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeByte(_iter28.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.allowed_dictionaries != null) {
        oprot.writeFieldBegin(ALLOWED_DICTIONARIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.allowed_dictionaries.size()));
          for (Dictionary _iter29 : struct.allowed_dictionaries)
          {
            oprot.writeI32(_iter29.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.board_template != null) {
        oprot.writeFieldBegin(BOARD_TEMPLATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.board_template.size()));
          for (Tile _iter30 : struct.board_template)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameInfoTupleSchemeFactory implements SchemeFactory {
    public GameInfoTupleScheme getScheme() {
      return new GameInfoTupleScheme();
    }
  }

  private static class GameInfoTupleScheme extends TupleScheme<GameInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetRackSize()) {
        optionals.set(1);
      }
      if (struct.isSetBingoBonus()) {
        optionals.set(2);
      }
      if (struct.isSetLetterDistribution()) {
        optionals.set(3);
      }
      if (struct.isSetScoreDistribution()) {
        optionals.set(4);
      }
      if (struct.isSetAllowedDictionaries()) {
        optionals.set(5);
      }
      if (struct.isSetBoardTemplate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetName()) {
        oprot.writeI32(struct.name.getValue());
      }
      if (struct.isSetRackSize()) {
        oprot.writeByte(struct.rack_size);
      }
      if (struct.isSetBingoBonus()) {
        {
          oprot.writeI32(struct.bingo_bonus.size());
          for (Map.Entry<Byte, Integer> _iter31 : struct.bingo_bonus.entrySet())
          {
            oprot.writeByte(_iter31.getKey());
            oprot.writeI32(_iter31.getValue());
          }
        }
      }
      if (struct.isSetLetterDistribution()) {
        {
          oprot.writeI32(struct.letter_distribution.size());
          for (Map.Entry<String, Byte> _iter32 : struct.letter_distribution.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            oprot.writeByte(_iter32.getValue());
          }
        }
      }
      if (struct.isSetScoreDistribution()) {
        {
          oprot.writeI32(struct.score_distribution.size());
          for (Map.Entry<String, Byte> _iter33 : struct.score_distribution.entrySet())
          {
            oprot.writeString(_iter33.getKey());
            oprot.writeByte(_iter33.getValue());
          }
        }
      }
      if (struct.isSetAllowedDictionaries()) {
        {
          oprot.writeI32(struct.allowed_dictionaries.size());
          for (Dictionary _iter34 : struct.allowed_dictionaries)
          {
            oprot.writeI32(_iter34.getValue());
          }
        }
      }
      if (struct.isSetBoardTemplate()) {
        {
          oprot.writeI32(struct.board_template.size());
          for (Tile _iter35 : struct.board_template)
          {
            _iter35.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.name = GameName.findByValue(iprot.readI32());
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rack_size = iprot.readByte();
        struct.setRackSizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.bingo_bonus = new HashMap<Byte,Integer>(2*_map36.size);
          byte _key37;
          int _val38;
          for (int _i39 = 0; _i39 < _map36.size; ++_i39)
          {
            _key37 = iprot.readByte();
            _val38 = iprot.readI32();
            struct.bingo_bonus.put(_key37, _val38);
          }
        }
        struct.setBingoBonusIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.letter_distribution = new HashMap<String,Byte>(2*_map40.size);
          String _key41;
          byte _val42;
          for (int _i43 = 0; _i43 < _map40.size; ++_i43)
          {
            _key41 = iprot.readString();
            _val42 = iprot.readByte();
            struct.letter_distribution.put(_key41, _val42);
          }
        }
        struct.setLetterDistributionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.score_distribution = new HashMap<String,Byte>(2*_map44.size);
          String _key45;
          byte _val46;
          for (int _i47 = 0; _i47 < _map44.size; ++_i47)
          {
            _key45 = iprot.readString();
            _val46 = iprot.readByte();
            struct.score_distribution.put(_key45, _val46);
          }
        }
        struct.setScoreDistributionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.allowed_dictionaries = new ArrayList<Dictionary>(_list48.size);
          Dictionary _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = Dictionary.findByValue(iprot.readI32());
            struct.allowed_dictionaries.add(_elem49);
          }
        }
        struct.setAllowedDictionariesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.board_template = new ArrayList<Tile>(_list51.size);
          Tile _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = new Tile();
            _elem52.read(iprot);
            struct.board_template.add(_elem52);
          }
        }
        struct.setBoardTemplateIsSet(true);
      }
    }
  }

}

